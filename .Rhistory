s$Condition <- as.character(s$Condition)
s$Pat.IDs <- as.character(s$Pat.IDs)
s$Tumor <- as.character(s$Tumor)
s$TCGA_Tumor <- as.character(s$TCGA_Tumor)
for(i in 1:nrow(s)) {
if(is.na(s$logFC[i])) {
s$logFC[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$logCPM[i])) {
s$logCPM[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$PValue[i])) {
s$PValue[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$FDR[i])) {
s$FDR[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Tumor[i])) {
s$Tumor[i] <- as.character(s$TCGA_Tumor[i])
}
}
for(i in 1:nrow(s)) {
if(is.na(s$log2FC.SCNAvsDip[i])) {
s$log2FC.SCNAvsDip[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$logCPM.SCNAvsDip[i])) {
s$logCPM.SCNAvsDip[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$p.val.SCNAvsDip[i])) {
s$p.val.SCNAvsDip[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$FDR.SCNAvsDip[i])) {
s$FDR.SCNAvsDip[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$TCGA_Tumor[i])) {
s$TCGA_Tumor[i] <- as.character(s$Tumor[i])
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Condition[i])) {
s$Condition[i] <- paste("Not SCN-altered in more than", pat.percentage, "% of the samples", sep=" ")
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Pat.percentage[i])) {
s$Pat.percentage[i] <- 0
}
}
s
if(nrow(SCNA.DEG.result) > 0) {
merge.dataDEGs <- .mergeDEGs(dataDEGs, SCNA.DEG.result, pat.percentage, genes, cosmic.genes)
if(is.null(EXPintCNA.results)) {
EXPintCNA.results <- merge.dataDEGs
}else{
EXPintCNA.results <- rbind(EXPintCNA.results, merge.dataDEGs)
}
}else{
merge.dataDEGs <- .setRowMatrix(nrow = 0, c("Gene_Symbol", "logFC", "logCPM", "PValue", "FDR", "Tumor", "log2FC.SCNAvsDip", "logCPM.SCNAvsDip", "p.val.SCNAvsDip", "FDR.SCNAvsDip", "TCGA_Tumor", "Condition", "Pat.percentage", "Pat.IDs"))
if(is.null(EXPintCNA.results)) {
EXPintCNA.results <- merge.dataDEGs
}else{
EXPintCNA.results <- rbind(EXPintCNA.results, merge.dataDEGs)
}
}
COSMIC.overlap <- .getOverlapCOSMIC(SCNA.DEG.result, genes, cosmic.genes)
if(is.null(COSMIC.ov.result)) {
COSMIC.ov.result <- COSMIC.overlap
}else{
COSMIC.ov.result <- rbind(COSMIC.ov.result, COSMIC.overlap)
}
if(nrow(EXPintCNA.results) > 0 && EXPintCNA.results$Gene_Symbol %in% genes){
write.table(EXPintCNA.results[EXPintCNA.results$Gene_Symbol %in% genes, ], "CiberAMP EXPintCNA results.txt", sep="\t", quote=FALSE)
write.table(EXPintCNA.results[EXPintCNA.results$Gene_Symbol %in% cosmic.genes, ], "CiberAMP EXPintCNA COSMIC genes results.txt", sep="\t", quote=FALSE)
write.table(COSMIC.ov.result, "CiberAMP COSMIC overlap results.txt", sep="\t", quote=FALSE)
end <- list(EXPintCNA.results[EXPintCNA.results$Gene_Symbol %in% genes, ], EXPintCNA.results[EXPintCNA.results$Gene_Symbol %in% cosmic.genes, ], COSMIC.ov.result)
return(end)
}else{
print("Any found")
}
EXPintCNA.results
EXPintCNA.results[EXPintCNA.results$Gene_Symbol %in% genes, ]
# This function combines dataDEGs and SCNA.DEG.result: 1) evaluated if dataDEGs is null or not and 2) creates a new integrated matrix with both data (if dataDEGs is null -> NAs introduced)
.mergeDEGs <- function(dataDEGs, SCNA.DEG.result, pat.percentage, genes, cosmic.genes) {
if(!is.null(dataDEGs) && nrow(dataDEGs[dataDEGs$Gene_Symbol %in% genes, ]) > 0) {
s <-  merge(dataDEGs, SCNA.DEG.result, by = "Gene_Symbol", all = TRUE)
s$Condition <- as.character(s$Condition)
s$Pat.IDs <- as.character(s$Pat.IDs)
s$Tumor <- as.character(s$Tumor)
s$TCGA_Tumor <- as.character(s$TCGA_Tumor)
for(i in 1:nrow(s)) {
if(is.na(s$logFC[i])) {
s$logFC[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$logCPM[i])) {
s$logCPM[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$PValue[i])) {
s$PValue[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$FDR[i])) {
s$FDR[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Tumor[i])) {
s$Tumor[i] <- as.character(s$TCGA_Tumor[i])
}
}
for(i in 1:nrow(s)) {
if(is.na(s$log2FC.SCNAvsDip[i])) {
s$log2FC.SCNAvsDip[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$logCPM.SCNAvsDip[i])) {
s$logCPM.SCNAvsDip[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$p.val.SCNAvsDip[i])) {
s$p.val.SCNAvsDip[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$FDR.SCNAvsDip[i])) {
s$FDR.SCNAvsDip[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$TCGA_Tumor[i])) {
s$TCGA_Tumor[i] <- as.character(s$Tumor[i])
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Condition[i])) {
s$Condition[i] <- paste("Not SCN-altered in more than", pat.percentage, "% of the samples", sep=" ")
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Pat.percentage[i])) {
s$Pat.percentage[i] <- 0
}
}
return(s)
}else if(is.null(dataDEGs) || nrow(dataDEGs[dataDEGs$Gene_Symbol %in% genes, ]) == 0) {
d <- as.data.frame(.setRowMatrix(nrow(SCNA.DEG.result), c("Gene_Symbol", "logFC", "logCPM", "PValue", "FDR", "Tumor")))
d$Gene_Symbol <- SCNA.DEG.result$Gene_Symbol
s <-  merge(d, SCNA.DEG.result, by = "Gene_Symbol", all = TRUE)
s$Condition <- as.character(s$Condition)
s$Pat.IDs <- as.character(s$Pat.IDs)
s$Tumor <- as.character(s$Tumor)
s$TCGA_Tumor <- as.character(s$TCGA_Tumor)
for(i in 1:nrow(s)) {
if(is.na(s$logFC[i])) {
s$logFC[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$logCPM[i])) {
s$logCPM[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$PValue[i])) {
s$PValue[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$FDR[i])) {
s$FDR[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Tumor[i])) {
s$Tumor[i] <- as.character(s$TCGA_Tumor[i])
}
}
for(i in 1:nrow(s)) {
if(is.na(s$log2FC.SCNAvsDip[i])) {
s$log2FC.SCNAvsDip[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$logCPM.SCNAvsDip[i])) {
s$logCPM.SCNAvsDip[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$p.val.SCNAvsDip[i])) {
s$p.val.SCNAvsDip[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$FDR.SCNAvsDip[i])) {
s$FDR.SCNAvsDip[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$TCGA_Tumor[i])) {
s$TCGA_Tumor[i] <- as.character(s$Tumor[i])
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Condition[i])) {
s$Condition[i] <- paste("Not SCN-altered in more than", pat.percentage, " ")
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Pat.percentage[i])) {
s$Pat.percentage[i] <- 0
}
}
return(s)
}
}
head(dataDEGs)
head(SCNA.DEG.result)
if(nrow(SCNA.DEG.result) > 0) {
merge.dataDEGs <- .mergeDEGs(dataDEGs, SCNA.DEG.result, pat.percentage, genes, cosmic.genes)
if(is.null(EXPintCNA.results)) {
EXPintCNA.results <- merge.dataDEGs
}else{
EXPintCNA.results <- rbind(EXPintCNA.results, merge.dataDEGs)
}
}else{
merge.dataDEGs <- .setRowMatrix(nrow = 0, c("Gene_Symbol", "logFC", "logCPM", "PValue", "FDR", "Tumor", "log2FC.SCNAvsDip", "logCPM.SCNAvsDip", "p.val.SCNAvsDip", "FDR.SCNAvsDip", "TCGA_Tumor", "Condition", "Pat.percentage", "Pat.IDs"))
if(is.null(EXPintCNA.results)) {
EXPintCNA.results <- merge.dataDEGs
}else{
EXPintCNA.results <- rbind(EXPintCNA.results, merge.dataDEGs)
}
}
EXPintCNA.results[EXPintCNA.results$Gene_Symbol %in% genes, ]
!is.null(dataDEGs) && nrow(dataDEGs[dataDEGs$Gene_Symbol %in% genes, ]) > 0
s <-  merge(dataDEGs, SCNA.DEG.result, by = "Gene_Symbol", all = TRUE)
s
s$Condition <- as.character(s$Condition)
s$Pat.IDs <- as.character(s$Pat.IDs)
s$Tumor <- as.character(s$Tumor)
s$TCGA_Tumor <- as.character(s$TCGA_Tumor)
for(i in 1:nrow(s)) {
if(is.na(s$logFC[i])) {
s$logFC[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$logCPM[i])) {
s$logCPM[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$PValue[i])) {
s$PValue[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$FDR[i])) {
s$FDR[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Tumor[i])) {
s$Tumor[i] <- as.character(s$TCGA_Tumor[i])
}
}
for(i in 1:nrow(s)) {
if(is.na(s$log2FC.SCNAvsDip[i])) {
s$log2FC.SCNAvsDip[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$logCPM.SCNAvsDip[i])) {
s$logCPM.SCNAvsDip[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$p.val.SCNAvsDip[i])) {
s$p.val.SCNAvsDip[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$FDR.SCNAvsDip[i])) {
s$FDR.SCNAvsDip[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$TCGA_Tumor[i])) {
s$TCGA_Tumor[i] <- as.character(s$Tumor[i])
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Condition[i])) {
s$Condition[i] <- paste("Not SCN-altered in more than", pat.percentage, "% of the samples", sep=" ")
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Pat.percentage[i])) {
s$Pat.percentage[i] <- 0
}
}
return(s)
s
is.null(dataDEGs) || nrow(dataDEGs[dataDEGs$Gene_Symbol %in% genes, ]) == 0
nrow(SCNA.DEG.result) > 0
if(nrow(SCNA.DEG.result) > 0) {
merge.dataDEGs <- .mergeDEGs(dataDEGs, SCNA.DEG.result, pat.percentage, genes, cosmic.genes)
if(is.null(EXPintCNA.results)) {
EXPintCNA.results <- merge.dataDEGs
}else{
EXPintCNA.results <- rbind(EXPintCNA.results, merge.dataDEGs)
}
}else{
merge.dataDEGs <- .setRowMatrix(nrow = 0, c("Gene_Symbol", "logFC", "logCPM", "PValue", "FDR", "Tumor", "log2FC.SCNAvsDip", "logCPM.SCNAvsDip", "p.val.SCNAvsDip", "FDR.SCNAvsDip", "TCGA_Tumor", "Condition", "Pat.percentage", "Pat.IDs"))
if(is.null(EXPintCNA.results)) {
EXPintCNA.results <- merge.dataDEGs
}else{
EXPintCNA.results <- rbind(EXPintCNA.results, merge.dataDEGs)
}
}
EXPintCNA.results <- NULL
COSMIC.ov.result <- NULL
if(nrow(SCNA.DEG.result) > 0) {
merge.dataDEGs <- .mergeDEGs(dataDEGs, SCNA.DEG.result, pat.percentage, genes, cosmic.genes)
if(is.null(EXPintCNA.results)) {
EXPintCNA.results <- merge.dataDEGs
}else{
EXPintCNA.results <- rbind(EXPintCNA.results, merge.dataDEGs)
}
}else{
merge.dataDEGs <- .setRowMatrix(nrow = 0, c("Gene_Symbol", "logFC", "logCPM", "PValue", "FDR", "Tumor", "log2FC.SCNAvsDip", "logCPM.SCNAvsDip", "p.val.SCNAvsDip", "FDR.SCNAvsDip", "TCGA_Tumor", "Condition", "Pat.percentage", "Pat.IDs"))
if(is.null(EXPintCNA.results)) {
EXPintCNA.results <- merge.dataDEGs
}else{
EXPintCNA.results <- rbind(EXPintCNA.results, merge.dataDEGs)
}
}
EXPintCNA.results
EXPintCNA.results[EXPintCNA.results$Gene_Symbol %in% genes, ]
int.plot.CiberAMP(EXPintCNA.results[EXPintCNA.results$Gene_Symbol %in% genes, ], COSMIC.ov.result)
library(ciberAMP)
int.plot.CiberAMP(EXPintCNA.results[EXPintCNA.results$Gene_Symbol %in% genes, ], COSMIC.ov.result)
EXPintCNA.results[EXPintCNA.results$Gene_Symbol %in% genes, ]
int.plot.CiberAMP(EXPintCNA.results[EXPintCNA.results$Gene_Symbol %in% genes, ], COSMIC.ov.result)
int.plot.CiberAMP(EXPintCNA.results[EXPintCNA.results$Gene_Symbol %in% genes, ], COSMIC.ov.result)
library(ciberAMP)
int.plot.CiberAMP(EXPintCNA.results[EXPintCNA.results$Gene_Symbol %in% genes, ], COSMIC.ov.result)
COSMIC.ov.result
COSMIC.overlap <- .getOverlapCOSMIC(SCNA.DEG.result, genes, cosmic.genes)
if(is.null(COSMIC.ov.result)) {
COSMIC.ov.result <- COSMIC.overlap
}else{
COSMIC.ov.result <- rbind(COSMIC.ov.result, COSMIC.overlap)
}
COSMIC.ov.result
int.plot.CiberAMP(EXPintCNA.results[EXPintCNA.results$Gene_Symbol %in% genes, ], COSMIC.ov.result)
#' Interactive plot with ShinyR package
#' @param df First or second data frame from CNAintEXP list of results. Contains the correlation results for SCNA and mRNA differential expression for 1) queried or 2) COSMIC CGC genes.
#' @param int.df Third data frame from CNAintEXP list of results. Contains overlappings between SCN-altered queried and COSMIC CGC genes.
#'
#' @return It allows the user to directly interact with data using a shiny app
#' @export
int.plot.CiberAMP <- function(df, int.df){
list.of.packages <- c("shiny", "plotly", "DT", "dplyr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages) > 0) {install.packages(new.packages)}
require(shiny)
require(plotly)
require(DT)
require(dplyr)
cohorts.list = list("BLCA" = "BLCA", "ACC" = "ACC", "BRCA" = "BRCA", "CESC" = "CESC", "CHOL" = "CHOL", "COAD" = "COAD", "DLBC" = "DLBC", "ESCA" = "ESCA", "GBM" = "GBM", "HNSC" = "HNSC", "KICH" = "KICH", "KIRC" = "KIRC", "KIRP" = "KIRP", "LAML" = "LAML", "LGG" = "LGG", "LIHC" = "LIHC", "LUAD" = "LUAD", "LUSC" = "LUSC", "MESO" = "MESO", "OV" = "OV", "PAAD" = "PAAD", "PRAD" = "PRAD", "READ" = "READ", "SARC" = "SARC", "SKCM" = "SKCM", "STAD" = "STAD", "TGCT" = "TGCT", "THCA" = "THCA", "THYM" = "THYM", "UCEC" = "UCEC", "UCS" = "UCS", "UVM" = "UVM" )
tumors <- .tumors_all()
tumors.with.normal <- .tumors_N()
df$KEY <- paste(df$Gene_Symbol, df$TCGA_Tumor, sep="_")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("CiberAMP"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
textAreaInput("genes", "Enter your genes", width = "100%", height = "250px", value = "ALL"),
actionButton("submit", "Submit"),
sliderInput("pat.perc", "Select the minimum copy number altered samples", value = 10, min = 0, max = 100),
numericInput("p.val.thr", "Select the adjusted p-value threshold.", value = 0.05, min = 0, max = 1),
numericInput("tvsn.fc.thr", "Select the minimum fold-change threshold when compare tumor vs normal samples.", value = 0, min = 0, max = Inf),
numericInput("cna.fc.thr", "Select the minimum fold-change threshold when compare CNA vs diploid samples.", value = 0, min = 0, max = Inf),
width = 3
),
# Show a plot of the generated distribution
mainPanel(
br(),
plotlyOutput("plot", width = "100%", height = "100%"),
br(),
br(),
conditionalPanel(condition = "!is.null(cosmic)", DT::dataTableOutput("cosmic")),
br()
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
g <- eventReactive(input$submit, {
unlist(strsplit(gsub("\n", ",", req(input$genes)), split = ","))
})
d <- reactive({
if("ALL" %in% g()) {
df[abs(df$logFC) >= input$tvsn.fc.thr & abs(df$log2FC.SCNAvsDip) >= input$cna.fc.thr & df$FDR.SCNAvsDip <= input$p.val.thr & df$Pat.percentage >= input$pat.perc, ]
}else{
df[df$Gene_Symbol %in% g() & abs(df$logFC) >= input$tvsn.fc.thr & abs(df$log2FC.SCNAvsDip) >= input$cna.fc.thr & df$FDR.SCNAvsDip <= input$p.val.thr & df$Pat.percentage >= input$pat.perc, ]
}
})
output$plot <- renderPlotly({ plot_ly(d(), x = ~logFC, y = ~log2FC.SCNAvsDip, source = "plot", key = ~KEY, text = ~paste("Symbol:", Gene_Symbol, "<br>Condition:", Condition, "<br>Tumor:", TCGA_Tumor, "<br>CNA samples (%):", Pat.percentage), type = "scatter", mode = "markers", marker = list(size = ~Pat.percentage, sizes = c(1, 100), opacity = 0.8, line = list(color = "white", width = 2)), color = ~TCGA_Tumor) %>%
layout(title = "CiberAMP plot for TCGA cohorts", xaxis = list(title = "mRNA DE tumor vs normal samples (log2(FC))", showgrid = TRUE), yaxis = list(title = "mRNA DE SCN-altered vs diploid tumor samples (log2(FC))", showgrid = TRUE))
})
output$cosmic <- DT::renderDataTable({
a <- event_data("plotly_click", source = "plot")
if(length(a)) {
a <- a[["key"]]
a <- strsplit(as.character(a), split = "_")
a <- unlist(a)
cosmic <- int.df[int.df$Gene_Symbol %in% a[1] & int.df$TCGA_Tumor %in% a[2], c("Gene_Symbol", "TCGA_Tumor", "Gene_Symbol_COSMIC", "PROP_GENE_COSMIC", "PROP_COSMIC_GENE")]
if(nrow(cosmic) > 0) {
DT::datatable(cosmic, options = list(scrollX = TRUE)) %>% formatRound(c("PROP_GENE_COSMIC", "PROP_COSMIC_GENE"), 2)
}else{
NULL
}
}else if(!length(a)) {
NULL
}
})
}
shinyApp(ui = ui, server = server)
}
int.plot.CiberAMP(EXPintCNA.results[EXPintCNA.results$Gene_Symbol %in% genes, ], COSMIC.ov.result)
rho <- read.table("~/Dropbox/Bioinformatics/Rho PanCancer/Rho Signature annotation.txt", sep="\t", header=TRUE)
r <- as.character(rho[,1])
x <- ciberAMP(genes = r, writePath = "/Users/lab02/Desktop/CiberAMP Rho")
int.plot.CiberAMP(x[[1]], x[[3]])
int.plot.CiberAMP(x[[1]], x[[3]])
library(ciberAMP)
int.plot.CiberAMP(x[[1]], x[[3]])
library(ciberAMP)
int.plot.CiberAMP(x[[1]], x[[3]])
library(ciberAMP)
int.plot.CiberAMP(x[[1]], x[[3]])
library(ciberAMP)
int.plot.CiberAMP(x[[1]], x[[3]])
library(ciberAMP)
library(ciberAMP)
int.plot.CiberAMP(x[[1]], x[[3]])
library(ciberAMP)
int.plot.CiberAMP(x[[1]], x[[3]])
library(ciberAMP)
int.plot.CiberAMP(x[[1]], x[[3]])
library(ciberAMP)
int.plot.CiberAMP(x[[1]], x[[3]])
class(x[[3]])
int.plot.CiberAMP(x[[1]], x[[3]])
library(ciberAMP)
int.plot.CiberAMP(x[[1]], x[[3]])
install.packages("chromoMap")
getwd("/var/folders/h0/hvrhmgls3g948pw50dybfw5h0000gn/T//RtmpiDv4QG/downloaded_packages")
sessionInfo()
packageVersion("TCGAbiolinks")
BiocManager::install("TCGAbiolinks")
packageVersion("TCGAbiolinks")
install.packages("chromPlot")
BiocManager::install("chromPlot")
library(chromPlot)
data(hg_gap)
head(hg_gap)
chromPlot(gaps=hg_gap)
data(hg_cytoBandIdeo)
head(hg_cytoBandIdeo)
chromPlot(bands=hg_cytoBandIdeo, gaps=hg_gap, chr=c("1", "2", "3", "4", "5",
+ "6"), figCols=6)
chromPlot(bands=hg_cytoBandIdeo, gaps=hg_gap)
summary(cars)
int.plot.CiberAMP(x[[1]], x[[3]])
x[[1]]
x
summary(cars)
cars
head(x[[1]])
x
save()
save("CiberAMP Rho deep.Rdata")
save(x, "CiberAMP Rho deep.Rdata")
save(x, file = "CiberAMP Rho deep.Rdata")
save(file = "CiberAMP Rho deep all.Rdata")
