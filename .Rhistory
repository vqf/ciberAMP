tmp <- CNAintEXP(genes = c('TP53'), cohorts = c('PAAD', 'BRCA'))
summary(tmp)
head(tmp)
tmp['TP53',]
library(ciberAMP)
tmp <- CNAintEXP(genes = c('TP53'), cohorts = c('PAAD', 'BRCA'))
tmp
library(ciberAMP)
library(ciberAMP)
library(ciberAMP)
library(ciberAMP)
library(ciberAMP)
tmp <- CNAintEXP(genes = c('TP53'), cohorts = c('PAAD', 'BRCA'))
library(ciberAMP)
tmp <- CNAintEXP(genes = c('TP53'), cohorts = c('PAAD', 'BRCA'))
library(ciberAMP)
library(ciberAMP)
library(ciberAMP)
library(ciberAMP)
library(ciberAMP)
library(ciberAMP)
library(ciberAMP)
library(ciberAMP)
library(ciberAMP)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TCGAbiolinks")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("TCGAbiolinks")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("purrrogress")
install.packages("BiocManager")
BiocManager::install("purrrogress")
BiocManager::install("TCGAbiolinks")
install.packages("purrr")
BiocManager::install("TCGAbiolinks")
source("http://bioconductor.org/biocLite.R")
biocLite("BiocUpgrade")
library(remotes)
install_github("halpo/purrrogress")
BiocManager::install("TCGAbiolinks")
BiocManager::install("TCGAbiolinks")
BiocManager::install("RTCGAToolbox")
BiocManager::install("TCGAbiolinks")
BiocManager::install("onewaytests")
BiocManager::install("TCGAbiolinks")
install_github("BioinformaticsFMRP/TCGAbiolinks")
BiocManager::install("BioinformaticsFMRP/TCGAbiolinks")
BiocManager::install("TCGAbiolinks")
library(BiocManager)
BiocManager::install("TCGAbiolinks")
library(installr)
install.packages("installr")
library(installr)
updateR()
library(BiocManager)
install.packages("car")
install.packages("stringr")
install.packages("dplyr")
install.packages("ggrepel")
library(BiocManager)
install.packages("BiocManager")
library(BiocManager)
BiocManager::install("TCGAbiolinks")
BiocManager::install("onewaytests")
BiocManager::install("survival")
BiocManager::install("RTCGAToolbox")
library(ciberAMP)
tmp <- CNAintEXP(cohorts = c('PAAD'))
install_github("halpo/purrrogress")
install.packages("remotes")
library(remotes)
install_github("halpo/purrrogress")
tmp <- CNAintEXP(cohorts = c('PAAD'))
help("CNAintEXP")
tmp <- CNAintEXP(genes = c('TP53'), cohorts = c('PAAD', 'BRCA'))
tmp <- CNAintEXP(genes = c('TP53'), cohorts = c('PAAD', 'BRCA'))
tmp <- CNAintEXP(genes = c('TP53'), cohorts = c('PAAD', 'BRCA'))
devtools::install_github("BioinformaticsFMRP/TCGAbiolinks")
install.packages("devtools")
devtools::install_github("BioinformaticsFMRP/TCGAbiolinks")
tmp <- CNAintEXP(genes = c('TP53'), cohorts = c('PAAD', 'BRCA'))
library(ciberAMP)
tmp <- CNAintEXP(genes = c('TP53'), cohorts = c('PAAD', 'BRCA'))
library(ciberAMP)
tmp <- CNAintEXP(genes = c('TP53'), cohorts = c('PAAD', 'BRCA'))
tmp
library(ciberAMP)
tmp <- CNAintEXP(genes = c('TP53'), cohorts = c('PAAD', 'BRCA'))
library(ciberAMP)
#' which means that the method considers TCGA copy-number analysis matrices belonging to `cohorts`.
#'
#' @return List containing four data frames:
#' 1 - CNA results for tumors with no normal samples in the database.
#' 2 - Integrated results between GENES and COSMIC for tumor cohorts.
#' 3 - CNA results for tumors with normal samples in the database.
#' 4 - Integrated results between GENES and COSMIC for tumor and normal cohorts. See vignette for details.
#' @export
#'
#' @examples
CNAintEXP <- function(genes = c(),
cohorts = c(),
writePath = NULL,
pat.percentage = 10,
pp.cor.cut = 0.6,
norm.method = "geneLength",
filt.method = "quantile",
filt.qnt.cut = 0.25,
filt.var.func = "IQR",
filt.var.cutoff = 0.75,
filt.eta = 0.05,
filt.FDR.DEA = 0.01,
filt.FC = 1,
normality.thr = 0.05,
var.thr = 0.05,
p.val.thr = 1,
cna.thr = "Deep",
exp.mat = NULL,
cna.mat = NULL) {
cosmic.genes <- all_genes()
genes <- as.character(genes)
sign <- c(genes, cosmic.genes)
if (is.null(writePath)){
writePath = getwd()
print(paste("Defaulting write path to ", writePath, sep = ""))
}
setwd(writePath)
tumors <- .tumors_all()
tumors.with.normal <- .tumors_N()
int.df.final <- .setRowMatrix(c("SYMBOL", "P.VAL", "CNA.FC", "PATIENTS.PERCENTAGE", "COND", "TEST", "TUMOR", "PAT.ID", "P.ADJ"))
exp.int.df.final <- .setRowMatrix(c("SYMBOL", "logFC.TvsN", "logCPM.TvsN", "PValue.TvsN", "FDR.TvsN", "Tumor", "P.VAL.CNAvsDip", "CNA.FC", "PATIENTS.PERCENTAGE.CNA", "COND", "TEST", "TUMOR", "PAT.ID", "P.ADJ"))
int.matrix.t.n <- .setRowMatrix(c("SYMBOL", "logFC.TvsN", "logCPM.TvsN", "PValue.TvsN", "FDR.TvsN", "Tumor", "P.VAL.CNAvsDip", "CNA.FC", "PATIENTS.PERCENTAGE.CNA", "COND", "TEST", "TUMOR", "PAT.ID", "P.ADJ", "SYMBOL.COSMIC", "logFC.TvsN.COSMIC", "logCPM.TvsN.COSMIC", "PValue.TvsN.COSMIC", "FDR.TvsN.COSMIC", "Tumor.COSMIC", "P.VAL.CNAvsDip.COSMIC", "CNA.FC.COSMIC", "PATIENTS.PERCENTAGE.CNA.COSMIC", "COND.COSMIC", "TEST.COSMIC", "TUMOR.COSMIC", "PAT.ID.COSMIC", "P.ADJ.COSMIC", "PROP_GENE_COSMIC", "PROP_COSMIC_GENE"))
int.matrix.t <- .setRowMatrix(c("SYMBOL", "P.VAL", "CNA.FC", "PATIENTS.PERCENTAGE", "COND", "TEST", "TUMOR", "PAT.ID", "P.ADJ", "SYMBOL.COSMIC", "P.VAL.COSMIC", "CNA.FC.COSMIC", "PATIENTS.PERCENTAGE", "COND.COSMIC", "TEST.COSMIC", "TUMOR.COSMIC", "PAT.ID", "P.ADJ.COSMIC", "PROP_GENE_COSMIC", "PROP_COSMIC_GENE"))
if(length(cohorts) == 0 || "ALL" %in% cohorts) {
cohorts <- tumors
}
for(tumor in cohorts) {
if(tumor %in% tumors) {
print(paste("Analyzing ", tumor, "...", sep=""))
}else{
print(paste("The introduced cohort: ", tumor, " was not found among the available TCGA cohorts. Bad-spelling is a common mistake, please check it or select any of the available ones.", sep=""))
next
}
dataDEGs <- NULL
if(is.null(exp.mat) & tumor %in% tumors.with.normal) {
# If the user does not provide an expression matrix as indicated...
tumor.exp <- .downloadExpression(tumor)
dataFilt <- .filterExpression(tumor, sign, tumor.exp, pp.cor.cut, norm.method,
filt.method, filt.qnt.cut, filt.var.func,
filt.var.cutoff, filt.eta, filt.FC)
dataDEGs <- .getDataDEGs(dataFilt, filt.FDR.DEA, filt.FC)
write.table(dataDEGs, file = paste("dataDEGs_", tumor, ".txt", sep=""), sep="\t", quote=FALSE)
}else if(is.null(exp.mat) & tumor != tumors.with.normal){
tumor.exp <- .downloadExpression(tumor)
dataFilt <- .filterExpression(tumor, sign, tumor.exp, pp.cor.cut, norm.method,
filt.method, filt.qnt.cut, filt.var.func,
filt.var.cutoff, filt.eta, filt.FC)
}else{
# If the user provides an expression matrix as indicated...
dataFilt <- exp.mat
}
if(is.null(cna.mat)) {
# If the user does not provide a SCNA matrix as indicated...
gistic <- .getSCNAmatrix(tumor)
}else if(!is.null(cna.mat)) {
# If the user provides a SCNA matrix as indicated...
gistic <- as.data.frame(cna.mat)
}
dataFilt <- dataFilt[intersect(rownames(dataFilt), rownames(gistic)), intersect(colnames(dataFilt), colnames(gistic))]
gistic <- gistic[intersect(rownames(dataFilt), rownames(gistic)), intersect(colnames(dataFilt), colnames(gistic))]
exp <- as.data.frame(t(dataFilt[order(rownames(dataFilt)), ]))
cna <- as.data.frame(t(gistic[order(rownames(gistic)), ]))
exp <- exp[order(rownames(exp)), ]
cna <- cna[order(rownames(cna)), ]
save(exp, file = paste(tumor, "_exp_matrix.rda", sep=""))
save(cna, file = paste(tumor, "_cna_matrix.rda", sep=""))
SCNA.DEG.result <- .setRowMatrix(c("Gene_Symbol", "log2FC.SCNAvsDip", "logCPM.SCNAvsDip", "p.val.SCNAvsDip", "FDR.SCNAvsDip", "Condition", "Pat.percentage", "Pat.IDs"))
for(j in 1:ncol(exp)) {
gene <- colnames(exp)[j]
new <- as.data.frame(.setRowMatrix(c(paste(gene, "_exp", sep=""), paste(gene, "_cna", sep="")))
rownames(new) <- rownames(exp)
new[,1] <- as.numeric(as.character(exp[,gene]))
new[,2] <- as.numeric(as.character(cna[,gene]))
group.del <- .selectDel(new, cna.thr)
group.amo <- .selectAmp(new, cna.thr)
group.del <- .selectDiploid(new, cna.thr)
print(gene)
print(paste("Deleted in ", nrow(group.del), " samples", sep=""))
print(paste("Amplified in ", nrow(group.amp), " samples", sep=""))
print(paste("Diploid in ", nrow(group.neutro), " samples", sep=""))
print("------------------------")
minimum.patients <- .setMinPat(new, pat.percentage)
del.patients <- (nrow(group.del)/nrow(new)) * 100
amp.patients <- (nrow(group.amp)/nrow(new)) * 100
neutro.patients <- (nrow(group.neutro)/nrow(new)) * 100
dataDEGs.SCNA <- NULL
if(isTRUE(nrow(group.del) < minimum.patients & nrow(group.amp) < minimum.patients)) {
next
}else if(isTRUE(nrow(group.del) < minimum.patients) | isTRUE(nrow(group.neutro) < minimum.patients) | isTRUE(nrow(group.amp) < minimum.patients){
group.x <- .setGroupX(group.del, group.amp, group.neutro, minimum.patients)
group.y <- .setGroupY(group.del, group.amp, group.neutro, minimum.patients)
cond <- .setCond(group.del, group.amp, group.neutro, minimum.patients)
SCNA.prop.pat <- .setSizePat(group.del, group.amp, group.neutro, minimum.patients)
pat.ids <- .setPatIDs(group.del, group.amp, group.neutro, minimum.patients, del.patients, amp.patients)
dataDEGs.SCNA <- .getDataDEGs_SCNA(dataFilt, group.x, group.y, filt.FDR.DEA, filt.FC)
}else if(isTRUE(nrow(group.del) >= minimum.patients) & isTRUE(nrow(group.neutro) >= minimum.patients)) {
group.x <- group.del
group.y <- group.neutro
cond <- c("Group DEL vs Group DIPLOID")
SCNA.prop.pat <- del.patients
pat.ids <- paste(rownames(group.del), collapse = ",")
dataDEGs.SCNA <- .getDataDEGs_SCNA(dataFilt, group.x, group.y, filt.FDR.DEA, filt.FC)
}else if(isTRUE(nrow(group.amp) >= minimum.patients) & isTRUE(nrow(group.neutro) >= minimum.patients)) {
group.x <- group.amp
group.y <- group.neutro
cond <- c("Group DEL vs Group DIPLOID")
SCNA.prop.pat <- amp.patients
pat.ids <- paste(rownames(group.amp), collapse = ",")
dataDEGs.SCNA <- .getDataDEGs_SCNA(dataFilt, group.x, group.y, filt.FDR.DEA, filt.FC)
}
if(!is.null(dataDEGs.SCNA)) {
line <- .newSCNAline(dataDEGs.SCNA, cond, SCNA.prop.pat, pat.ids)
SCNA.DEG.result <- rbind(SCNA.DEG.result, line)
}
}
SCNA.DEG.result <- .convertToDF(SCNA.DEG.result)
}
#results <- list(as.data.frame(res1), as.data.frame(int.matrix.t), as.data.frame(res2), as.data.frame(int.matrix.t.n))
#return(results)
}
#' which means that the method considers TCGA copy-number analysis matrices belonging to `cohorts`.
#'
#' @return List containing four data frames:
#' 1 - CNA results for tumors with no normal samples in the database.
#' 2 - Integrated results between GENES and COSMIC for tumor cohorts.
#' 3 - CNA results for tumors with normal samples in the database.
#' 4 - Integrated results between GENES and COSMIC for tumor and normal cohorts. See vignette for details.
#' @export
#'
#' @examples
CNAintEXP <- function(genes = c(),
cohorts = c(),
writePath = NULL,
pat.percentage = 10,
pp.cor.cut = 0.6,
norm.method = "geneLength",
filt.method = "quantile",
filt.qnt.cut = 0.25,
filt.var.func = "IQR",
filt.var.cutoff = 0.75,
filt.eta = 0.05,
filt.FDR.DEA = 0.01,
filt.FC = 1,
normality.thr = 0.05,
var.thr = 0.05,
p.val.thr = 1,
cna.thr = "Deep",
exp.mat = NULL,
cna.mat = NULL) {
cosmic.genes <- all_genes()
genes <- as.character(genes)
sign <- c(genes, cosmic.genes)
if (is.null(writePath)){
writePath = getwd()
print(paste("Defaulting write path to ", writePath, sep = ""))
}
setwd(writePath)
tumors <- .tumors_all()
tumors.with.normal <- .tumors_N()
int.df.final <- .setRowMatrix(c("SYMBOL", "P.VAL", "CNA.FC", "PATIENTS.PERCENTAGE", "COND", "TEST", "TUMOR", "PAT.ID", "P.ADJ"))
exp.int.df.final <- .setRowMatrix(c("SYMBOL", "logFC.TvsN", "logCPM.TvsN", "PValue.TvsN", "FDR.TvsN", "Tumor", "P.VAL.CNAvsDip", "CNA.FC", "PATIENTS.PERCENTAGE.CNA", "COND", "TEST", "TUMOR", "PAT.ID", "P.ADJ"))
int.matrix.t.n <- .setRowMatrix(c("SYMBOL", "logFC.TvsN", "logCPM.TvsN", "PValue.TvsN", "FDR.TvsN", "Tumor", "P.VAL.CNAvsDip", "CNA.FC", "PATIENTS.PERCENTAGE.CNA", "COND", "TEST", "TUMOR", "PAT.ID", "P.ADJ", "SYMBOL.COSMIC", "logFC.TvsN.COSMIC", "logCPM.TvsN.COSMIC", "PValue.TvsN.COSMIC", "FDR.TvsN.COSMIC", "Tumor.COSMIC", "P.VAL.CNAvsDip.COSMIC", "CNA.FC.COSMIC", "PATIENTS.PERCENTAGE.CNA.COSMIC", "COND.COSMIC", "TEST.COSMIC", "TUMOR.COSMIC", "PAT.ID.COSMIC", "P.ADJ.COSMIC", "PROP_GENE_COSMIC", "PROP_COSMIC_GENE"))
int.matrix.t <- .setRowMatrix(c("SYMBOL", "P.VAL", "CNA.FC", "PATIENTS.PERCENTAGE", "COND", "TEST", "TUMOR", "PAT.ID", "P.ADJ", "SYMBOL.COSMIC", "P.VAL.COSMIC", "CNA.FC.COSMIC", "PATIENTS.PERCENTAGE", "COND.COSMIC", "TEST.COSMIC", "TUMOR.COSMIC", "PAT.ID", "P.ADJ.COSMIC", "PROP_GENE_COSMIC", "PROP_COSMIC_GENE"))
if(length(cohorts) == 0 || "ALL" %in% cohorts) {
cohorts <- tumors
}
for(tumor in cohorts) {
if(tumor %in% tumors) {
print(paste("Analyzing ", tumor, "...", sep=""))
}else{
print(paste("The introduced cohort: ", tumor, " was not found among the available TCGA cohorts. Bad-spelling is a common mistake, please check it or select any of the available ones.", sep=""))
next
}
dataDEGs <- NULL
if(is.null(exp.mat) & tumor %in% tumors.with.normal) {
# If the user does not provide an expression matrix as indicated...
tumor.exp <- .downloadExpression(tumor)
dataFilt <- .filterExpression(tumor, sign, tumor.exp, pp.cor.cut, norm.method,
filt.method, filt.qnt.cut, filt.var.func,
filt.var.cutoff, filt.eta, filt.FC)
dataDEGs <- .getDataDEGs(dataFilt, filt.FDR.DEA, filt.FC)
write.table(dataDEGs, file = paste("dataDEGs_", tumor, ".txt", sep=""), sep="\t", quote=FALSE)
}else if(is.null(exp.mat) & tumor != tumors.with.normal){
tumor.exp <- .downloadExpression(tumor)
dataFilt <- .filterExpression(tumor, sign, tumor.exp, pp.cor.cut, norm.method,
filt.method, filt.qnt.cut, filt.var.func,
filt.var.cutoff, filt.eta, filt.FC)
}else{
# If the user provides an expression matrix as indicated...
dataFilt <- exp.mat
}
if(is.null(cna.mat)) {
# If the user does not provide a SCNA matrix as indicated...
gistic <- .getSCNAmatrix(tumor)
}else if(!is.null(cna.mat)) {
# If the user provides a SCNA matrix as indicated...
gistic <- as.data.frame(cna.mat)
}
dataFilt <- dataFilt[intersect(rownames(dataFilt), rownames(gistic)), intersect(colnames(dataFilt), colnames(gistic))]
gistic <- gistic[intersect(rownames(dataFilt), rownames(gistic)), intersect(colnames(dataFilt), colnames(gistic))]
exp <- as.data.frame(t(dataFilt[order(rownames(dataFilt)), ]))
cna <- as.data.frame(t(gistic[order(rownames(gistic)), ]))
exp <- exp[order(rownames(exp)), ]
cna <- cna[order(rownames(cna)), ]
save(exp, file = paste(tumor, "_exp_matrix.rda", sep=""))
save(cna, file = paste(tumor, "_cna_matrix.rda", sep=""))
SCNA.DEG.result <- .setRowMatrix(c("Gene_Symbol", "log2FC.SCNAvsDip", "logCPM.SCNAvsDip", "p.val.SCNAvsDip", "FDR.SCNAvsDip", "Condition", "Pat.percentage", "Pat.IDs"))
for(j in 1:ncol(exp)) {
gene <- colnames(exp)[j]
new <- as.data.frame(.setRowMatrix(c(paste(gene, "_exp", sep=""), paste(gene, "_cna", sep="")))
rownames(new) <- rownames(exp)
new[,1] <- as.numeric(as.character(exp[,gene]))
new[,2] <- as.numeric(as.character(cna[,gene]))
group.del <- .selectDel(new, cna.thr)
group.amo <- .selectAmp(new, cna.thr)
group.del <- .selectDiploid(new, cna.thr)
print(gene)
print(paste("Deleted in ", nrow(group.del), " samples", sep=""))
print(paste("Amplified in ", nrow(group.amp), " samples", sep=""))
print(paste("Diploid in ", nrow(group.neutro), " samples", sep=""))
print("------------------------")
minimum.patients <- .setMinPat(new, pat.percentage)
del.patients <- (nrow(group.del)/nrow(new)) * 100
amp.patients <- (nrow(group.amp)/nrow(new)) * 100
neutro.patients <- (nrow(group.neutro)/nrow(new)) * 100
dataDEGs.SCNA <- NULL
if(isTRUE(nrow(group.del) < minimum.patients & nrow(group.amp) < minimum.patients)) {
next
}else if(isTRUE(nrow(group.del) < minimum.patients) | isTRUE(nrow(group.neutro) < minimum.patients) | isTRUE(nrow(group.amp) < minimum.patients){
group.x <- .setGroupX(group.del, group.amp, group.neutro, minimum.patients)
group.y <- .setGroupY(group.del, group.amp, group.neutro, minimum.patients)
cond <- .setCond(group.del, group.amp, group.neutro, minimum.patients)
SCNA.prop.pat <- .setSizePat(group.del, group.amp, group.neutro, minimum.patients)
pat.ids <- .setPatIDs(group.del, group.amp, group.neutro, minimum.patients, del.patients, amp.patients)
dataDEGs.SCNA <- .getDataDEGs_SCNA(dataFilt, group.x, group.y, filt.FDR.DEA, filt.FC)
}else if(isTRUE(nrow(group.del) >= minimum.patients) & isTRUE(nrow(group.neutro) >= minimum.patients)) {
group.x <- group.del
group.y <- group.neutro
cond <- c("Group DEL vs Group DIPLOID")
SCNA.prop.pat <- del.patients
pat.ids <- paste(rownames(group.del), collapse = ",")
dataDEGs.SCNA <- .getDataDEGs_SCNA(dataFilt, group.x, group.y, filt.FDR.DEA, filt.FC)
}else if(isTRUE(nrow(group.amp) >= minimum.patients) & isTRUE(nrow(group.neutro) >= minimum.patients)) {
group.x <- group.amp
group.y <- group.neutro
cond <- c("Group DEL vs Group DIPLOID")
SCNA.prop.pat <- amp.patients
pat.ids <- paste(rownames(group.amp), collapse = ",")
dataDEGs.SCNA <- .getDataDEGs_SCNA(dataFilt, group.x, group.y, filt.FDR.DEA, filt.FC)
}
if(!is.null(dataDEGs.SCNA)) {
line <- .newSCNAline(dataDEGs.SCNA, cond, SCNA.prop.pat, pat.ids)
SCNA.DEG.result <- rbind(SCNA.DEG.result, line)
}
}
SCNA.DEG.result <- .convertToDF(SCNA.DEG.result)
}
#results <- list(as.data.frame(res1), as.data.frame(int.matrix.t), as.data.frame(res2), as.data.frame(int.matrix.t.n))
#return(results)
}
#' which means that the method considers TCGA copy-number analysis matrices belonging to `cohorts`.
#'
#' @return List containing four data frames:
#' 1 - CNA results for tumors with no normal samples in the database.
#' 2 - Integrated results between GENES and COSMIC for tumor cohorts.
#' 3 - CNA results for tumors with normal samples in the database.
#' 4 - Integrated results between GENES and COSMIC for tumor and normal cohorts. See vignette for details.
#' @export
#'
#' @examples
CNAintEXP <- function(genes = c(),
cohorts = c(),
writePath = NULL,
pat.percentage = 10,
pp.cor.cut = 0.6,
norm.method = "geneLength",
filt.method = "quantile",
filt.qnt.cut = 0.25,
filt.var.func = "IQR",
filt.var.cutoff = 0.75,
filt.eta = 0.05,
filt.FDR.DEA = 0.01,
filt.FC = 1,
normality.thr = 0.05,
var.thr = 0.05,
p.val.thr = 1,
cna.thr = "Deep",
exp.mat = NULL,
cna.mat = NULL) {
cosmic.genes <- all_genes()
genes <- as.character(genes)
sign <- c(genes, cosmic.genes)
if (is.null(writePath)){
writePath = getwd()
print(paste("Defaulting write path to ", writePath, sep = ""))
}
setwd(writePath)
tumors <- .tumors_all()
tumors.with.normal <- .tumors_N()
int.df.final <- .setRowMatrix(c("SYMBOL", "P.VAL", "CNA.FC", "PATIENTS.PERCENTAGE", "COND", "TEST", "TUMOR", "PAT.ID", "P.ADJ"))
exp.int.df.final <- .setRowMatrix(c("SYMBOL", "logFC.TvsN", "logCPM.TvsN", "PValue.TvsN", "FDR.TvsN", "Tumor", "P.VAL.CNAvsDip", "CNA.FC", "PATIENTS.PERCENTAGE.CNA", "COND", "TEST", "TUMOR", "PAT.ID", "P.ADJ"))
int.matrix.t.n <- .setRowMatrix(c("SYMBOL", "logFC.TvsN", "logCPM.TvsN", "PValue.TvsN", "FDR.TvsN", "Tumor", "P.VAL.CNAvsDip", "CNA.FC", "PATIENTS.PERCENTAGE.CNA", "COND", "TEST", "TUMOR", "PAT.ID", "P.ADJ", "SYMBOL.COSMIC", "logFC.TvsN.COSMIC", "logCPM.TvsN.COSMIC", "PValue.TvsN.COSMIC", "FDR.TvsN.COSMIC", "Tumor.COSMIC", "P.VAL.CNAvsDip.COSMIC", "CNA.FC.COSMIC", "PATIENTS.PERCENTAGE.CNA.COSMIC", "COND.COSMIC", "TEST.COSMIC", "TUMOR.COSMIC", "PAT.ID.COSMIC", "P.ADJ.COSMIC", "PROP_GENE_COSMIC", "PROP_COSMIC_GENE"))
int.matrix.t <- .setRowMatrix(c("SYMBOL", "P.VAL", "CNA.FC", "PATIENTS.PERCENTAGE", "COND", "TEST", "TUMOR", "PAT.ID", "P.ADJ", "SYMBOL.COSMIC", "P.VAL.COSMIC", "CNA.FC.COSMIC", "PATIENTS.PERCENTAGE", "COND.COSMIC", "TEST.COSMIC", "TUMOR.COSMIC", "PAT.ID", "P.ADJ.COSMIC", "PROP_GENE_COSMIC", "PROP_COSMIC_GENE"))
if(length(cohorts) == 0 || "ALL" %in% cohorts) {
cohorts <- tumors
}
for(tumor in cohorts) {
if(tumor %in% tumors) {
print(paste("Analyzing ", tumor, "...", sep=""))
}else{
print(paste("The introduced cohort: ", tumor, " was not found among the available TCGA cohorts. Bad-spelling is a common mistake, please check it or select any of the available ones.", sep=""))
next
}
dataDEGs <- NULL
if(is.null(exp.mat) & tumor %in% tumors.with.normal) {
# If the user does not provide an expression matrix as indicated...
tumor.exp <- .downloadExpression(tumor)
dataFilt <- .filterExpression(tumor, sign, tumor.exp, pp.cor.cut, norm.method,
filt.method, filt.qnt.cut, filt.var.func,
filt.var.cutoff, filt.eta, filt.FC)
dataDEGs <- .getDataDEGs(dataFilt, filt.FDR.DEA, filt.FC)
write.table(dataDEGs, file = paste("dataDEGs_", tumor, ".txt", sep=""), sep="\t", quote=FALSE)
}else if(is.null(exp.mat) & tumor != tumors.with.normal){
tumor.exp <- .downloadExpression(tumor)
dataFilt <- .filterExpression(tumor, sign, tumor.exp, pp.cor.cut, norm.method,
filt.method, filt.qnt.cut, filt.var.func,
filt.var.cutoff, filt.eta, filt.FC)
}else{
# If the user provides an expression matrix as indicated...
dataFilt <- exp.mat
}
if(is.null(cna.mat)) {
# If the user does not provide a SCNA matrix as indicated...
gistic <- .getSCNAmatrix(tumor)
}else if(!is.null(cna.mat)) {
# If the user provides a SCNA matrix as indicated...
gistic <- as.data.frame(cna.mat)
}
dataFilt <- dataFilt[intersect(rownames(dataFilt), rownames(gistic)), intersect(colnames(dataFilt), colnames(gistic))]
gistic <- gistic[intersect(rownames(dataFilt), rownames(gistic)), intersect(colnames(dataFilt), colnames(gistic))]
exp <- as.data.frame(t(dataFilt[order(rownames(dataFilt)), ]))
cna <- as.data.frame(t(gistic[order(rownames(gistic)), ]))
exp <- exp[order(rownames(exp)), ]
cna <- cna[order(rownames(cna)), ]
save(exp, file = paste(tumor, "_exp_matrix.rda", sep=""))
save(cna, file = paste(tumor, "_cna_matrix.rda", sep=""))
SCNA.DEG.result <- .setRowMatrix(c("Gene_Symbol", "log2FC.SCNAvsDip", "logCPM.SCNAvsDip", "p.val.SCNAvsDip", "FDR.SCNAvsDip", "Condition", "Pat.percentage", "Pat.IDs"))
for(j in 1:ncol(exp)) {
gene <- colnames(exp)[j]
new <- as.data.frame(.setRowMatrix(c(paste(gene, "_exp", sep=""), paste(gene, "_cna", sep="")))
rownames(new) <- rownames(exp)
new[,1] <- as.numeric(as.character(exp[,gene]))
new[,2] <- as.numeric(as.character(cna[,gene]))
group.del <- .selectDel(new, cna.thr)
group.amo <- .selectAmp(new, cna.thr)
group.del <- .selectDiploid(new, cna.thr)
print(gene)
print(paste("Deleted in ", nrow(group.del), " samples", sep=""))
print(paste("Amplified in ", nrow(group.amp), " samples", sep=""))
print(paste("Diploid in ", nrow(group.neutro), " samples", sep=""))
print("------------------------")
minimum.patients <- .setMinPat(new, pat.percentage)
del.patients <- (nrow(group.del)/nrow(new)) * 100
amp.patients <- (nrow(group.amp)/nrow(new)) * 100
neutro.patients <- (nrow(group.neutro)/nrow(new)) * 100
dataDEGs.SCNA <- NULL
if(isTRUE(nrow(group.del) < minimum.patients & nrow(group.amp) < minimum.patients)) {
next
}else if(isTRUE(nrow(group.del) < minimum.patients) | isTRUE(nrow(group.neutro) < minimum.patients) | isTRUE(nrow(group.amp) < minimum.patients){
group.x <- .setGroupX(group.del, group.amp, group.neutro, minimum.patients)
group.y <- .setGroupY(group.del, group.amp, group.neutro, minimum.patients)
cond <- .setCond(group.del, group.amp, group.neutro, minimum.patients)
SCNA.prop.pat <- .setSizePat(group.del, group.amp, group.neutro, minimum.patients)
pat.ids <- .setPatIDs(group.del, group.amp, group.neutro, minimum.patients, del.patients, amp.patients)
dataDEGs.SCNA <- .getDataDEGs_SCNA(dataFilt, group.x, group.y, filt.FDR.DEA, filt.FC)
}else if(isTRUE(nrow(group.del) >= minimum.patients) & isTRUE(nrow(group.neutro) >= minimum.patients)) {
group.x <- group.del
group.y <- group.neutro
cond <- c("Group DEL vs Group DIPLOID")
SCNA.prop.pat <- del.patients
pat.ids <- paste(rownames(group.del), collapse = ",")
dataDEGs.SCNA <- .getDataDEGs_SCNA(dataFilt, group.x, group.y, filt.FDR.DEA, filt.FC)
}else if(isTRUE(nrow(group.amp) >= minimum.patients) & isTRUE(nrow(group.neutro) >= minimum.patients)) {
group.x <- group.amp
group.y <- group.neutro
cond <- c("Group DEL vs Group DIPLOID")
SCNA.prop.pat <- amp.patients
pat.ids <- paste(rownames(group.amp), collapse = ",")
dataDEGs.SCNA <- .getDataDEGs_SCNA(dataFilt, group.x, group.y, filt.FDR.DEA, filt.FC)
}
if(!is.null(dataDEGs.SCNA)) {
line <- .newSCNAline(dataDEGs.SCNA, cond, SCNA.prop.pat, pat.ids)
SCNA.DEG.result <- rbind(SCNA.DEG.result, line)
}
}
SCNA.DEG.result <- .convertToDF(SCNA.DEG.result)
}
#results <- list(as.data.frame(res1), as.data.frame(int.matrix.t), as.data.frame(res2), as.data.frame(int.matrix.t.n))
#return(results)
}
