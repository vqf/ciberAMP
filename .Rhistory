}else{
return(NULL)
}
}
#This function configures the new line for significant DEGs in SCN-altered samples
.newSCNAline <- function(dataDEGs.SCNA, cond, SCNA.prop.pat, pat.ids) {
return(c(rownames(dataDEGs.SCNA), dataDEGs.SCNA[1,1], dataDEGs.SCNA[1,2], dataDEGs.SCNA[1,3], dataDEGs.SCNA[1,4], dataDEGs.SCNA[1,5], cond, SCNA.prop.pat, pat.ids))
}
# This function converts the SCNA DE resulting matrix into df
.convertToDF <- function(SCNA.DEG.result) {
SCNA.DEG.result <- as.data.frame(SCNA.DEG.result)
SCNA.DEG.result$log2FC.SCNAvsDip <- as.numeric(as.character(SCNA.DEG.result$log2FC.SCNAvsDip))
SCNA.DEG.result$logCPM.SCNAvsDip <- as.numeric(as.character(SCNA.DEG.result$logCPM.SCNAvsDip))
SCNA.DEG.result$p.val.SCNAvsDip <- as.numeric(as.character(SCNA.DEG.result$p.val.SCNAvsDip))
SCNA.DEG.result$FDR.SCNAvsDip <- p.adjust(as.numeric(as.character(SCNA.DEG.result$p.val.SCNAvsDip)), method = "fdr")
SCNA.DEG.result$Pat.percentage <- as.numeric(as.character(SCNA.DEG.result$Pat.percentage))
return(SCNA.DEG.result)
}
# This function combines dataDEGs and SCNA.DEG.result: 1) evaluated if dataDEGs is null or not and 2) creates a new integrated matrix with both data (if dataDEGs is null -> NAs introduced)
.mergeDEGs <- function(dataDEGs, SCNA.DEG.result, pat.percentage) {
if(!is.null(dataDEGs) && nrow(dataDEGs[dataDEGs$Gene_Symbol %in% genes, ]) > 0) {
s <-  merge(dataDEGs[dataDEGs$Gene_Symbol %in% genes & dataDEGs$Gene_Symbol %in% cosmic.genes, ], SCNA.DEG.result, by = "Gene_Symbol", all = TRUE)
s$Condition <- as.character(s$Condition)
s$Pat.IDs <- as.character(s$Pat.IDs)
s$Tumor <- as.character(s$Tumor)
s$TCGA_Tumor <- as.character(s$TCGA_Tumor)
for(i in 1:nrow(s)) {
if(is.na(s$logFC[i])) {
s$logFC[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$logCPM[i])) {
s$logCPM[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$PValue[i])) {
s$PValue[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$FDR[i])) {
s$FDR[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Tumor[i])) {
s$Tumor[i] <- as.character(s$TCGA_Tumor[i])
}
}
for(i in 1:nrow(s)) {
if(is.na(s$log2FC.SCNAvsDip[i])) {
s$log2FC.SCNAvsDip[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$logCPM.SCNAvsDip[i])) {
s$logCPM.SCNAvsDip[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$p.val.SCNAvsDip[i])) {
s$p.val.SCNAvsDip[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$FDR.SCNAvsDip[i])) {
s$FDR.SCNAvsDip[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$TCGA_Tumor[i])) {
s$TCGA_Tumor[i] <- as.character(s$Tumor[i])
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Condition[i])) {
s$Condition[i] <- paste("Not SCN-altered in more than", pat.percentage, "% of the samples", sep=" ")
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Pat.percentage[i])) {
s$Pat.percentage[i] <- 0
}
}
return(s)
}else if(is.null(dataDEGs)) {
d <- as.data.frame(.setRowMatrix(nrow(SCNA.DEG.result), c("Gene_Symbol", "logFC", "logCPM", "PValue", "FDR", "Tumor")))
d$Gene_Symbol <- SCNA.DEG.result$Gene_Symbol
s <-  merge(d, SCNA.DEG.result, by = "Gene_Symbol", all = TRUE)
s$Condition <- as.character(s$Condition)
s$Pat.IDs <- as.character(s$Pat.IDs)
s$Tumor <- as.character(s$Tumor)
s$TCGA_Tumor <- as.character(s$TCGA_Tumor)
for(i in 1:nrow(s)) {
if(is.na(s$logFC[i])) {
s$logFC[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$logCPM[i])) {
s$logCPM[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$PValue[i])) {
s$PValue[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$FDR[i])) {
s$FDR[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Tumor[i])) {
s$Tumor[i] <- as.character(s$TCGA_Tumor[i])
}
}
for(i in 1:nrow(s)) {
if(is.na(s$log2FC.SCNAvsDip[i])) {
s$log2FC.SCNAvsDip[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$logCPM.SCNAvsDip[i])) {
s$logCPM.SCNAvsDip[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$p.val.SCNAvsDip[i])) {
s$p.val.SCNAvsDip[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$FDR.SCNAvsDip[i])) {
s$FDR.SCNAvsDip[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$TCGA_Tumor[i])) {
s$TCGA_Tumor[i] <- as.character(s$Tumor[i])
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Condition[i])) {
s$Condition[i] <- paste("Not SCN-altered in more than", pat.percentage, " ")
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Pat.percentage[i])) {
s$Pat.percentage[i] <- 0
}
}
return(s)
}
}
# This function returns for each copy number altered gene all those cosmic ones highly correlating: 1) CN-altered samples overlap > 70% and 2) DE correlation
.getOverlapCOSMIC <- function(SCNA.DEG.result, genes, cosmic.genes) {
int.matrix <- .setRowMatrix(0, colnames(SCNA.DEG.result))
input <- SCNA.DEG.result[SCNA.DEG.result$Gene_Symbol %in% genes & SCNA.DEG.result$log2FC.SCNAvsDip != 0, ]
cosmic <- SCNA.DEG.result[SCNA.DEG.result$Gene_Symbol %in% cosmic.genes & SCNA.DEG.result$log2FC.SCNAvsDip != 0, ]
colnames(cosmic) <- paste(colnames(cosmic), "COSMIC", sep="_")
if(nrow(input) > 0 & nrow(cosmic) > 0) {
for(j in 1:nrow(input)) {
for(k in 1:nrow(cosmic)) {
if(input$TCGA_Tumor[j] == cosmic$TCGA_Tumor[k] & as.character(input$Condition[j]) == as.character(cosmic$Condition[k])) {
a <- unlist(strsplit(as.character(input$Pat.IDs[j]), ","))
b <- unlist(strsplit(as.character(cosmic$Pat.IDs[k]), ","))
int <- intersect(a, b)
a.l <- length(a)
b.l <- length(b)
int.l <- length(int)
prop.gene.cosmic <- (int.l/a.l) * 100
prop.cosmic.gene <- (int.l/b.l) * 100
if(prop.gene.cosmic >= 70) {
line <- cbind(as.vector(input[j,]), cosmic[k, ])
line$PROP_GENE_COSMIC <- prop.gene.cosmic
line$PROP_COSMIC_GENE <- prop.cosmic.gene
int.matrix <- rbind(int.matrix, line)
}
}
}
}
}
return(int.matrix)
}
# If the user does not provide an expression matrix as indicated...
tumor.exp <- .downloadExpression(tumor, tumors.with.normal)
cosmic.genes <- all_cosmic_genes()
genes <- as.character(genes)
writePath = NULL
pat.percentage = 10
pp.cor.cut = 0.6
norm.method = "geneLength"
filt.method = "quantile"
filt.qnt.cut = 0.25
filt.var.func = "IQR"
filt.var.cutoff = 0.75
filt.eta = 0.05
filt.FDR.DEA = 0.01
filt.FC = 1
normality.thr = 0.05
var.thr = 0.05
p.val.thr = 1
cna.thr = "Deep"
exp.mat = NULL
cna.mat = NULL
genes <- c("DGKG", "CDKN2A")
cohorts <- c("HNSC")
cosmic.genes <- all_cosmic_genes()
genes <- as.character(genes)
sign <- c(genes, cosmic.genes)
if (is.null(writePath)){
writePath = getwd()
print(paste("Defaulting write path to ", writePath, sep = ""))
}
setwd(writePath)
tumors <- .tumors_all()
tumors.with.normal <- .tumors_N()
if(length(cohorts) == 0 || "ALL" %in% cohorts) {
cohorts <- tumors
}
EXPintCNA.results <- NULL
COSMIC.ov.result <- NULL
i <- 1
tumor <- cohorts[i]
if(tumor %in% tumors) {
print(paste("Analyzing ", tumor, "...", sep=""))
}else{
print(paste("The introduced cohort: ", tumor, " was not found among the available TCGA cohorts. Bad-spelling is a common mistake, please check it or select any of the available ones.", sep=""))
next
}
dataDEGs <- NULL
is.null(exp.mat) && tumor %in% tumors.with.normal
# If the user does not provide an expression matrix as indicated...
tumor.exp <- .downloadExpression(tumor, tumors.with.normal)
for(i in 1:length(cohorts)) {
tumor <- cohorts[i]
if(tumor %in% tumors) {
print(paste("Analyzing ", tumor, "...", sep=""))
}else{
print(paste("The introduced cohort: ", tumor, " was not found among the available TCGA cohorts. Bad-spelling is a common mistake, please check it or select any of the available ones.", sep=""))
next
}
dataDEGs <- NULL
if(is.null(exp.mat) && tumor %in% tumors.with.normal) {
# If the user does not provide an expression matrix as indicated...
tumor.exp <- .downloadExpression(tumor, tumors.with.normal)
dataFilt <- .filterExpression(tumor, sign, tumor.exp, pp.cor.cut, norm.method,
filt.method, filt.qnt.cut, filt.var.func,
filt.var.cutoff, filt.eta, filt.FC)
dataDEGs <- .getDataDEGs(dataFilt, filt.FDR.DEA, filt.FC)
write.table(dataDEGs, file = paste("dataDEGs_", tumor, ".txt", sep=""), sep="\t", quote=FALSE)
}else if(is.null(exp.mat) && tumor != tumors.with.normal){
tumor.exp <- .downloadExpression(tumor, tumors.with.normal)
dataFilt <- .filterExpression(tumor, sign, tumor.exp, pp.cor.cut, norm.method,
filt.method, filt.qnt.cut, filt.var.func,
filt.var.cutoff, filt.eta, filt.FC)
}else{
# If the user provides an expression matrix as indicated...
dataFilt <- exp.mat
}
if(is.null(cna.mat)) {
# If the user does not provide a SCNA matrix as indicated...
gistic <- .getSCNAmatrix(tumor)
}else if(!is.null(cna.mat)) {
# If the user provides a SCNA matrix as indicated...
gistic <- as.data.frame(cna.mat)
}
colnames(dataFilt) <- substr(colnames(dataFilt), 1, 12)
dataFilt <- dataFilt[intersect(rownames(dataFilt), rownames(gistic)), intersect(colnames(dataFilt), colnames(gistic))]
gistic <- gistic[intersect(rownames(dataFilt), rownames(gistic)), intersect(colnames(dataFilt), colnames(gistic))]
exp <- as.data.frame(t(dataFilt[order(rownames(dataFilt)), ]))
cna <- as.data.frame(t(gistic[order(rownames(gistic)), ]))
exp <- exp[order(rownames(exp)), ]
cna <- cna[order(rownames(cna)), ]
save(exp, file = paste(tumor, "_exp_matrix.rda", sep=""))
save(cna, file = paste(tumor, "_cna_matrix.rda", sep=""))
SCNA.DEG.result <- .setRowMatrix(0, c("Gene_Symbol", "log2FC.SCNAvsDip", "logCPM.SCNAvsDip", "p.val.SCNAvsDip", "FDR.SCNAvsDip", "TCGA_Tumor", "Condition", "Pat.percentage", "Pat.IDs"))
for(j in 1:ncol(exp)) {
gene <- colnames(exp)[j]
new <- as.data.frame(.setRowMatrix(nrow(exp), c(paste(gene, "_exp", sep=""), paste(gene, "_cna", sep=""))))
rownames(new) <- rownames(exp)
new[,1] <- as.numeric(as.character(exp[,gene]))
new[,2] <- as.numeric(as.character(cna[,gene]))
group.del <- .selectDel(new, cna.thr)
group.amp <- .selectAmp(new, cna.thr)
group.neutro <- .selectDiploid(new, cna.thr)
print(gene)
print(paste("Deleted in ", nrow(group.del), " samples", sep=""))
print(paste("Amplified in ", nrow(group.amp), " samples", sep=""))
print(paste("Diploid in ", nrow(group.neutro), " samples", sep=""))
print("------------------------")
minimum.patients <- .setMinPat(new, pat.percentage)
del.patients <- (nrow(group.del)/nrow(new)) * 100
amp.patients <- (nrow(group.amp)/nrow(new)) * 100
neutro.patients <- (nrow(group.neutro)/nrow(new)) * 100
dataDEGs.SCNA <- NULL
if(isTRUE(nrow(group.del) < minimum.patients & nrow(group.amp) < minimum.patients)) {
next
}else if(isTRUE(nrow(group.del) >= minimum.patients) & isTRUE(nrow(group.neutro) >= minimum.patients)) {
group.x <- group.del
group.y <- group.neutro
cond <- c("Group DEL vs Group DIPLOID")
SCNA.prop.pat <- del.patients
pat.ids <- paste(rownames(group.del), collapse = ",")
dataDEGs.SCNA <- .getDataDEGs_SCNA(dataFilt, group.x, group.y, filt.FDR.DEA, filt.FC)
}else if(isTRUE(nrow(group.amp) >= minimum.patients) & isTRUE(nrow(group.neutro) >= minimum.patients)) {
group.x <- group.amp
group.y <- group.neutro
cond <- c("Group AMP vs Group DIPLOID")
SCNA.prop.pat <- amp.patients
pat.ids <- paste(rownames(group.amp), collapse = ",")
dataDEGs.SCNA <- .getDataDEGs_SCNA(dataFilt, group.x, group.y, filt.FDR.DEA, filt.FC)
}
if(!is.null(dataDEGs.SCNA)) {
line <- .newSCNAline(dataDEGs.SCNA, cond, SCNA.prop.pat, pat.ids)
SCNA.DEG.result <- rbind(SCNA.DEG.result, line)
}
}
SCNA.DEG.result <- .convertToDF(SCNA.DEG.result)
COSMIC.overlap <- .getOverlapCOSMIC(SCNA.DEG.result, genes, cosmic.genes)
merge.dataDEGs <- .mergeDEGs(dataDEGs, SCNA.DEG.result, pat.percentage)
if(is.null(EXPintCNA.results)) {
EXPintCNA.results <- merge.dataDEGs
}else{
EXPintCNA.results <- rbind(EXPintCNA.results, merge.dataDEGs)
}
if(is.null(COSMIC.ov.result)) {
COSMIC.ov.result <- COSMIC.overlap
}else{
COSMIC.ov.result <- rbind(COSMIC.ov.result, COSMIC.overlap)
}
}
library(ciberAMP)
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("HNSC"))
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("HNSC"))
library(ciberAMP)
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("HNSC"))
tumor.exp
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("ACC"))
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("HNSC"))
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("ESCA"))
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("ACC"))
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("ACC"))
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("ACC"))
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("ACC"))
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("BLCA"))
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("PCPG"))
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("LAML"))
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("LIHC"))
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("CHOL"))
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("OV"))
library(ciberAMP)
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("ACC")
)
library(ciberAMP)
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("ACC"))
library(ciberAMP)
library(ciberAMP)
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("ACC"))
library(ciberAMP)
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("ACC"))
library(ciberAMP)
library(ciberAMP)
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("ACC"))
x
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("ACC", "HNSC"))
library(ciberAMP)
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("ACC", "HNSC"))
library(ciberAMP)
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("ACC", "HNSC"))
library(ciberAMP)
x <- CNAintEXP(genes = c("DGKG", "CDKN2A"), cohorts = c("ACC", "HNSC"))
x
t <- c("ACC", "HNSC")
library(foreach)
foreach(i in 1:length(t)) %do% CNAintEXP(genes = c("CDKN2A"), cohorts = t)
foreach(1:length(t)) %do% CNAintEXP(genes = c("CDKN2A"), cohorts = t)
library(doParallel)
foreach(1:length(t)) %dopar% CNAintEXP(genes = c("CDKN2A"), cohorts = t)
foreach(i = 1:length(t), combine = "rbind") %dopar% CNAintEXP(genes = c("CDKN2A"), cohorts = t)
x
#' Plot CiberAMP results with ggplot
#'
#' @return ggplot2 graph where Y axis = mRNA diff. expression between SCN-altered vs diploit tumors and X axis = mRNA diff. expression between Tumor and Normal tissue
#' @export
ggplot.CiberAMP <- function(output){
df.exp <- output[[1]]
ggplot(df.exp, aes(x = logFC, y = log2FC.SCNAvsDip, color = TCGA_Tumor)) + geom_point(aes(size = Pat.percentage, shape = ifelse(d$Condition %in% "Group AMP vs Group DIPLOID", '17', '16'))) + scale_colour_manual(values = c("ACC" = "#ffcccc", "BLCA" = "#ffd9cc", "BRCA" = "#ffe6cc", "CHOL" = "#fff2cc", "COAD" = "#ffffcc", "CESC" = "#f2ffcc", "DLBC" = "#e6ffcc", "ESCA" = "#d9ffcc", "GBM" = "#ccffcc", "HNSC" = "#ccffd9", "KIRC" = "#ccffe6", "KIRP" = "#ccfff2", "KICH" = "#ccffff", "LAML" = "#ccf2ff", "LIHC" = "#cce6ff", "LGG" = "#ccd9ff", "LUAD" = "#ccccff", "LUSC" = "#d9ccff", "MESO" = "#e6ccff", "OV" = "#f2ccff", "PAAD" ="#ffccff", "PCPG" = "#ffccf2", "PRAD" = "#ffcce6", "READ" = "#ffccd9", "SARC" = "#ffcccc", "SKCM" = "#ff6666", "STAD" = "#b366ff",  "TGCT" = "#668cff", "THCA" = "#ff8c66", "THYM" = "#ff0000", "UCEC" = "#848785", "UCS" = "#767676", "UVM" = "#86C0C3")) + scale_size_continuous(range = c(2,10))
}
ggplot.CiberAMP(x)
library(ggplot2)
ggplot.CiberAMP(x)
#' Plot CiberAMP results with ggplot
#'
#' @return ggplot2 graph where Y axis = mRNA diff. expression between SCN-altered vs diploit tumors and X axis = mRNA diff. expression between Tumor and Normal tissue
#' @export
ggplot.CiberAMP <- function(output){
df.exp <- output[[1]]
ggplot(df.exp, aes(x = logFC, y = log2FC.SCNAvsDip, color = TCGA_Tumor)) + geom_point(aes(size = Pat.percentage, shape = ifelse(df.exp$Condition %in% "Group AMP vs Group DIPLOID", '17', '16'))) + scale_colour_manual(values = c("ACC" = "#ffcccc", "BLCA" = "#ffd9cc", "BRCA" = "#ffe6cc", "CHOL" = "#fff2cc", "COAD" = "#ffffcc", "CESC" = "#f2ffcc", "DLBC" = "#e6ffcc", "ESCA" = "#d9ffcc", "GBM" = "#ccffcc", "HNSC" = "#ccffd9", "KIRC" = "#ccffe6", "KIRP" = "#ccfff2", "KICH" = "#ccffff", "LAML" = "#ccf2ff", "LIHC" = "#cce6ff", "LGG" = "#ccd9ff", "LUAD" = "#ccccff", "LUSC" = "#d9ccff", "MESO" = "#e6ccff", "OV" = "#f2ccff", "PAAD" ="#ffccff", "PCPG" = "#ffccf2", "PRAD" = "#ffcce6", "READ" = "#ffccd9", "SARC" = "#ffcccc", "SKCM" = "#ff6666", "STAD" = "#b366ff",  "TGCT" = "#668cff", "THCA" = "#ff8c66", "THYM" = "#ff0000", "UCEC" = "#848785", "UCS" = "#767676", "UVM" = "#86C0C3")) + scale_size_continuous(range = c(2,10))
}
ggplot.CiberAMP(x)
#' Plot CiberAMP results with ggplot
#'
#' @return ggplot2 graph where Y axis = mRNA diff. expression between SCN-altered vs diploit tumors and X axis = mRNA diff. expression between Tumor and Normal tissue
#' @export
ggplot.CiberAMP <- function(output){
df.exp <- output[[1]]
ggplot(df.exp, aes(x = logFC, y = log2FC.SCNAvsDip, color = TCGA_Tumor)) + geom_point(aes(size = Pat.percentage, shape = ifelse(Condition %in% "Group AMP vs Group DIPLOID", '17', '16'))) + scale_colour_manual(values = c("ACC" = "#ffcccc", "BLCA" = "#ffd9cc", "BRCA" = "#ffe6cc", "CHOL" = "#fff2cc", "COAD" = "#ffffcc", "CESC" = "#f2ffcc", "DLBC" = "#e6ffcc", "ESCA" = "#d9ffcc", "GBM" = "#ccffcc", "HNSC" = "#ccffd9", "KIRC" = "#ccffe6", "KIRP" = "#ccfff2", "KICH" = "#ccffff", "LAML" = "#ccf2ff", "LIHC" = "#cce6ff", "LGG" = "#ccd9ff", "LUAD" = "#ccccff", "LUSC" = "#d9ccff", "MESO" = "#e6ccff", "OV" = "#f2ccff", "PAAD" ="#ffccff", "PCPG" = "#ffccf2", "PRAD" = "#ffcce6", "READ" = "#ffccd9", "SARC" = "#ffcccc", "SKCM" = "#ff6666", "STAD" = "#b366ff",  "TGCT" = "#668cff", "THCA" = "#ff8c66", "THYM" = "#ff0000", "UCEC" = "#848785", "UCS" = "#767676", "UVM" = "#86C0C3")) + scale_size_continuous(range = c(2,10))
}
ggplot.CiberAMP(x)
x[[1]]
#' Plot CiberAMP results with plotly (interactive)
#'
#' @return ggplot2 graph where Y axis = mRNA diff. expression between SCN-altered vs diploit tumors and X axis = mRNA diff. expression between Tumor and Normal tissue
#' @export
plotly.CiberAMP <- function(output){
df.exp <- output[[1]]
plot_ly(df.exp, x = ~logFC, y = ~log2FC.SCNAvsDip, text = ~paste("Symbol:", Gene_Symbol, "<br>Condition:", Condition, "<br>Tumor:", TCGA_Tumor,"<br>Samples affected (%):",Pat.percentage), type = "scatter", mode = "markers",  marker = list(size = ~Pat.percentage, opacity = ~-log10(~FDR.SCNAvsDip), color = factor(c$TCGA_Tumor,labels=c(ifelse("ACC" %in% factor(c$TCGA_Tumor), "#ffcccc", "red")))), sizes = c(10,50))
}
plotly.CiberAMP(x)
library(plotly)
plotly.CiberAMP(x)
#' Plot CiberAMP results with plotly (interactive)
#'
#' @return ggplot2 graph where Y axis = mRNA diff. expression between SCN-altered vs diploit tumors and X axis = mRNA diff. expression between Tumor and Normal tissue
#' @export
plotly.CiberAMP <- function(output){
df.exp <- output[[1]]
plot_ly(df.exp, x = ~logFC, y = ~log2FC.SCNAvsDip, text = ~paste("Symbol:", Gene_Symbol, "<br>Condition:", Condition, "<br>Tumor:", TCGA_Tumor,"<br>Samples affected (%):",Pat.percentage), type = "scatter", mode = "markers",  marker = list(size = ~Pat.percentage, opacity = ~-log10(~FDR.SCNAvsDip)), sizes = c(10,50))
}
plotly.CiberAMP(x)
#' Plot CiberAMP results with plotly (interactive)
#'
#' @return ggplot2 graph where Y axis = mRNA diff. expression between SCN-altered vs diploit tumors and X axis = mRNA diff. expression between Tumor and Normal tissue
#' @export
plotly.CiberAMP <- function(output){
df.exp <- output[[1]]
plot_ly(df.exp, x = ~logFC, y = ~log2FC.SCNAvsDip, text = ~paste("Symbol:", Gene_Symbol, "<br>Condition:", Condition, "<br>Tumor:", TCGA_Tumor,"<br>Samples affected (%):",Pat.percentage), type = "scatter", mode = "markers",  marker = list(size = ~Pat.percentage, opacity = ~-log10(df.exp~FDR.SCNAvsDip)), sizes = c(10,50))
}
plotly.CiberAMP(x)
d <- x[[1]]
d$FDR.SCNAvsDip
class(d$FDR.SCNAvsDip)
#' Plot CiberAMP results with plotly (interactive)
#'
#' @return ggplot2 graph where Y axis = mRNA diff. expression between SCN-altered vs diploit tumors and X axis = mRNA diff. expression between Tumor and Normal tissue
#' @export
plotly.CiberAMP <- function(output){
df.exp <- output[[1]]
plot_ly(df.exp, x = ~logFC, y = ~log2FC.SCNAvsDip, text = ~paste("Symbol:", Gene_Symbol, "<br>Condition:", Condition, "<br>Tumor:", TCGA_Tumor,"<br>Samples affected (%):",Pat.percentage), type = "scatter", mode = "markers",  marker = list(size = ~Pat.percentage), sizes = c(10,50))
}
plotly.CiberAMP(x)
plotly.CiberAMP(x)
ggplot.CiberAMP(x)
#' Plot CiberAMP results with ggplot
#'
#' @return ggplot2 graph where Y axis = mRNA diff. expression between SCN-altered vs diploit tumors and X axis = mRNA diff. expression between Tumor and Normal tissue
#' @export
ggplot.CiberAMP <- function(output){
df.exp <- output[[1]]
ggplot(df.exp, aes(x = logFC, y = log2FC.SCNAvsDip, color = TCGA_Tumor)) + geom_point(aes(size = Pat.percentage, shape = ifelse(Condition %in% "Group AMP vs Group DIPLOID", '17', '16'))) + scale_colour_manual(values = c("ACC" = "#ffcccc", "BLCA" = "#ffd9cc", "BRCA" = "#ffe6cc", "CHOL" = "#fff2cc", "COAD" = "#ffffcc", "CESC" = "#f2ffcc", "DLBC" = "#e6ffcc", "ESCA" = "#d9ffcc", "GBM" = "#ccffcc", "HNSC" = "#ccffd9", "KIRC" = "#ccffe6", "KIRP" = "#ccfff2", "KICH" = "#ccffff", "LAML" = "#ccf2ff", "LIHC" = "#cce6ff", "LGG" = "#ccd9ff", "LUAD" = "#ccccff", "LUSC" = "#d9ccff", "MESO" = "#e6ccff", "OV" = "#f2ccff", "PAAD" ="#ffccff", "PCPG" = "#ffccf2", "PRAD" = "#ffcce6", "READ" = "#ffccd9", "SARC" = "#ffcccc", "SKCM" = "#ff6666", "STAD" = "#b366ff",  "TGCT" = "#668cff", "THCA" = "#ff8c66", "THYM" = "#ff0000", "UCEC" = "#848785", "UCS" = "#767676", "UVM" = "#86C0C3")) + scale_size_continuous(range = c(2,10)) + theme_minimal()
}
ggplot.CiberAMP(x)
#' Plot CiberAMP results with ggplot
#'
#' @return ggplot2 graph where Y axis = mRNA diff. expression between SCN-altered vs diploit tumors and X axis = mRNA diff. expression between Tumor and Normal tissue
#' @export
ggplot.CiberAMP <- function(output){
df.exp <- output[[1]]
ggplot(df.exp, aes(x = logFC, y = log2FC.SCNAvsDip, color = TCGA_Tumor)) + geom_point(aes(size = Pat.percentage), shape = ifelse(df.exp$Condition %in% "Group AMP vs Group DIPLOID", 17, 16)) + scale_colour_manual(values = c("ACC" = "#ffcccc", "BLCA" = "#ffd9cc", "BRCA" = "#ffe6cc", "CHOL" = "#fff2cc", "COAD" = "#ffffcc", "CESC" = "#f2ffcc", "DLBC" = "#e6ffcc", "ESCA" = "#d9ffcc", "GBM" = "#ccffcc", "HNSC" = "#ccffd9", "KIRC" = "#ccffe6", "KIRP" = "#ccfff2", "KICH" = "#ccffff", "LAML" = "#ccf2ff", "LIHC" = "#cce6ff", "LGG" = "#ccd9ff", "LUAD" = "#ccccff", "LUSC" = "#d9ccff", "MESO" = "#e6ccff", "OV" = "#f2ccff", "PAAD" ="#ffccff", "PCPG" = "#ffccf2", "PRAD" = "#ffcce6", "READ" = "#ffccd9", "SARC" = "#ffcccc", "SKCM" = "#ff6666", "STAD" = "#b366ff",  "TGCT" = "#668cff", "THCA" = "#ff8c66", "THYM" = "#ff0000", "UCEC" = "#848785", "UCS" = "#767676", "UVM" = "#86C0C3")) + scale_size_continuous(range = c(2,10)) + theme_minimal()
}
ggplot.CiberAMP(x)
#' Plot CiberAMP results with ggplot
#'
#' @return ggplot2 graph where Y axis = mRNA diff. expression between SCN-altered vs diploit tumors and X axis = mRNA diff. expression between Tumor and Normal tissue
#' @export
ggplot.CiberAMP <- function(output){
df.exp <- output[[1]]
ggplot(df.exp, aes(x = logFC, y = log2FC.SCNAvsDip, color = TCGA_Tumor)) + geom_point(aes(size = Pat.percentage), shape = ifelse(df.exp$Condition %in% "Group AMP vs Group DIPLOID", 17, 16)) + scale_colour_manual(values = c("ACC" = "#ffcccc", "BLCA" = "#ffd9cc", "BRCA" = "#ffe6cc", "CHOL" = "#fff2cc", "COAD" = "#ffffcc", "CESC" = "#f2ffcc", "DLBC" = "#e6ffcc", "ESCA" = "#d9ffcc", "GBM" = "#ccffcc", "HNSC" = "#ccffd9", "KIRC" = "#ccffe6", "KIRP" = "#ccfff2", "KICH" = "#ccffff", "LAML" = "#ccf2ff", "LIHC" = "#cce6ff", "LGG" = "#ccd9ff", "LUAD" = "#ccccff", "LUSC" = "#d9ccff", "MESO" = "#e6ccff", "OV" = "#f2ccff", "PAAD" ="#ffccff", "PCPG" = "#ffccf2", "PRAD" = "#ffcce6", "READ" = "#ffccd9", "SARC" = "#ffcccc", "SKCM" = "#ff6666", "STAD" = "#b366ff",  "TGCT" = "#668cff", "THCA" = "#ff8c66", "THYM" = "#ff0000", "UCEC" = "#848785", "UCS" = "#767676", "UVM" = "#86C0C3")) + scale_size_continuous(range = c(4,20)) + theme_minimal()
}
ggplot.CiberAMP(x)
plotly.CiberAMP(x)
ggplot.CiberAMP(x)
#' Plot CiberAMP results with ggplot
#'
#' @return ggplot2 graph where Y axis = mRNA diff. expression between SCN-altered vs diploit tumors and X axis = mRNA diff. expression between Tumor and Normal tissue
#' @export
ggplot.CiberAMP <- function(output){
df.exp <- output[[1]]
ggplot(df.exp, aes(x = logFC, y = log2FC.SCNAvsDip, color = TCGA_Tumor)) + geom_point(aes(size = Pat.percentage), shape = ifelse(df.exp$Condition %in% "Group AMP vs Group DIPLOID", 17, 16)) + scale_colour_manual(values = c("ACC" = "#ffcccc", "BLCA" = "#ffd9cc", "BRCA" = "#ffe6cc", "CHOL" = "#fff2cc", "COAD" = "#ffffcc", "CESC" = "#f2ffcc", "DLBC" = "#e6ffcc", "ESCA" = "#d9ffcc", "GBM" = "#ccffcc", "HNSC" = "#ccffd9", "KIRC" = "#ccffe6", "KIRP" = "#ccfff2", "KICH" = "#ccffff", "LAML" = "#ccf2ff", "LIHC" = "#cce6ff", "LGG" = "#ccd9ff", "LUAD" = "#ccccff", "LUSC" = "#d9ccff", "MESO" = "#e6ccff", "OV" = "#f2ccff", "PAAD" ="#ffccff", "PCPG" = "#ffccf2", "PRAD" = "#ffcce6", "READ" = "#ffccd9", "SARC" = "#ffcccc", "SKCM" = "#ff6666", "STAD" = "#b366ff",  "TGCT" = "#668cff", "THCA" = "#ff8c66", "THYM" = "#ff0000", "UCEC" = "#848785", "UCS" = "#767676", "UVM" = "#86C0C3")) + scale_size_continuous(range = c(4,20)) + theme_minimal() + xlab("mRNA diff. exp. tumor vs normal samples (log2(FC))") + xlab("mRNA diff. exp. SCN-altered vs diploid tumor samples (log2(FC))")
}
ggplot.CiberAMP(x)
#' Plot CiberAMP results with ggplot
#'
#' @return ggplot2 graph where Y axis = mRNA diff. expression between SCN-altered vs diploit tumors and X axis = mRNA diff. expression between Tumor and Normal tissue
#' @export
ggplot.CiberAMP <- function(output){
df.exp <- output[[1]]
ggplot(df.exp, aes(x = logFC, y = log2FC.SCNAvsDip, color = TCGA_Tumor)) + geom_point(aes(size = Pat.percentage), shape = ifelse(df.exp$Condition %in% "Group AMP vs Group DIPLOID", 17, 16)) + scale_colour_manual(values = c("ACC" = "#ffcccc", "BLCA" = "#ffd9cc", "BRCA" = "#ffe6cc", "CHOL" = "#fff2cc", "COAD" = "#ffffcc", "CESC" = "#f2ffcc", "DLBC" = "#e6ffcc", "ESCA" = "#d9ffcc", "GBM" = "#ccffcc", "HNSC" = "#ccffd9", "KIRC" = "#ccffe6", "KIRP" = "#ccfff2", "KICH" = "#ccffff", "LAML" = "#ccf2ff", "LIHC" = "#cce6ff", "LGG" = "#ccd9ff", "LUAD" = "#ccccff", "LUSC" = "#d9ccff", "MESO" = "#e6ccff", "OV" = "#f2ccff", "PAAD" ="#ffccff", "PCPG" = "#ffccf2", "PRAD" = "#ffcce6", "READ" = "#ffccd9", "SARC" = "#ffcccc", "SKCM" = "#ff6666", "STAD" = "#b366ff",  "TGCT" = "#668cff", "THCA" = "#ff8c66", "THYM" = "#ff0000", "UCEC" = "#848785", "UCS" = "#767676", "UVM" = "#86C0C3")) + scale_size_continuous(range = c(4,20)) + theme_minimal() + xlab("mRNA diff. exp. tumor vs normal samples (log2(FC))") + ylab("mRNA diff. exp. SCN-altered vs diploid tumor samples (log2(FC))")
}
ggplot.CiberAMP(x)
rho <- read.table("~/Dropbox/Bioinformatics/Rho PanCancer/Rho Signature annotation.txt", sep="\t", header=TRUE)
r <- as.character(rho[,1])
x <- CNAintEXP(genes = r, cohorts = "ALL", writePath = "/Users/lab02/Desktop/untitled folder", cna.thr = "Both")
library(parallel)
library(doParallel)
library(foreach)
setwd("/Users/lab02/Desktop/untitled folder")
