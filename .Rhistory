group.neutro <- new[new[,2] == 0, ]
}else if(cna.thr == "Shallow") {
group.neutro <- new[new[,2] == 0, ]
}else if(cna.thr == "Both"){
group.neutro <- new[new[,2] == 0, ]
}
return(group.neutro)
}
.selectDiploid <- function(new, cna.thr) {
if(cna.thr == "Deep") {
group.neutro <- new[new[,2] == 0, ]
return(group.neutro)
}else if(cna.thr == "Shallow") {
group.neutro <- new[new[,2] == 0, ]
return(group.neutro)
}else if(cna.thr == "Both"){
group.neutro <- new[new[,2] == 0, ]
return(group.neutro)
}
}
# This function sets the minimum number of patients to be analyzed
.setMinPat <- function(new, pat.percentage) {
min <- (nrow(new) * pat.percentage)/100
if(min >= 3) {
return(min)
}else if(min < 3){
return(3)
}
}
# This function compares if the genes is differentially expressed when SCN-altered in tumors.
.getDataDEGs_SCNA <- function(tumor, dataFilt, group.x, group.y, filt.FDR.DEA, filt.FC, gene) {
samplesNT <- rownames(group.y)
samplesTP <- rownames(group.x)
dataDEGs <- TCGAbiolinks::TCGAanalyze_DEA(mat1 = dataFilt[, samplesNT],
mat2 = dataFilt[,samplesTP],
metadata = FALSE,
Cond1type = "Diploid",
Cond2type = "SCN-altered",
fdr.cut = filt.FDR.DEA,
logFC.cut = filt.FC,
method = "exactTest")
dataDEGs$Tumor <- rep(tumor, times = nrow(dataDEGs))
if(gene %in% rownames(dataDEGs)) {
dataDEGs <- dataDEGs[gene, ]
return(dataDEGs)
}else{
return(NULL)
}
}
#This function configures the new line for significant DEGs in SCN-altered samples.
.newSCNAline <- function(dataDEGs.SCNA, cond, SCNA.prop.pat, pat.ids) {
return(c(rownames(dataDEGs.SCNA), dataDEGs.SCNA[1,1], dataDEGs.SCNA[1,2], dataDEGs.SCNA[1,3], dataDEGs.SCNA[1,4], dataDEGs.SCNA[1,5], cond, SCNA.prop.pat, pat.ids))
}
# This function converts the SCNA DE resulting matrix into df
.convertToDF <- function(SCNA.DEG.result) {
SCNA.DEG.result <- as.data.frame(SCNA.DEG.result)
SCNA.DEG.result$log2FC.SCNAvsDip <- as.numeric(as.character(SCNA.DEG.result$log2FC.SCNAvsDip))
SCNA.DEG.result$logCPM.SCNAvsDip <- as.numeric(as.character(SCNA.DEG.result$logCPM.SCNAvsDip))
SCNA.DEG.result$p.val.SCNAvsDip <- as.numeric(as.character(SCNA.DEG.result$p.val.SCNAvsDip))
SCNA.DEG.result$FDR.SCNAvsDip <- p.adjust(as.numeric(as.character(SCNA.DEG.result$p.val.SCNAvsDip)), method = "fdr")
SCNA.DEG.result$Pat.percentage <- as.numeric(as.character(SCNA.DEG.result$Pat.percentage))
return(SCNA.DEG.result)
}
# This function combines dataDEGs and SCNA.DEG.result: 1) evaluated if dataDEGs is null or not and 2) creates a new integrated matrix with both data (if dataDEGs is null -> NAs introduced)
.mergeDEGs <- function(dataDEGs, SCNA.DEG.result, pat.percentage, genes, cosmic.genes) {
if(!is.null(dataDEGs) && nrow(dataDEGs[dataDEGs$Gene_Symbol %in% genes, ]) > 0) {
s <-  merge(dataDEGs, SCNA.DEG.result, by = "Gene_Symbol", all = TRUE)
s$Condition <- as.character(s$Condition)
s$Pat.IDs <- as.character(s$Pat.IDs)
s$Tumor <- as.character(s$Tumor)
s$TCGA_Tumor <- as.character(s$TCGA_Tumor)
for(i in 1:nrow(s)) {
if(is.na(s$logFC[i])) {
s$logFC[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$logCPM[i])) {
s$logCPM[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$PValue[i])) {
s$PValue[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$FDR[i])) {
s$FDR[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Tumor[i])) {
s$Tumor[i] <- as.character(s$TCGA_Tumor[i])
}
}
for(i in 1:nrow(s)) {
if(is.na(s$log2FC.SCNAvsDip[i])) {
s$log2FC.SCNAvsDip[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$logCPM.SCNAvsDip[i])) {
s$logCPM.SCNAvsDip[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$p.val.SCNAvsDip[i])) {
s$p.val.SCNAvsDip[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$FDR.SCNAvsDip[i])) {
s$FDR.SCNAvsDip[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$TCGA_Tumor[i])) {
s$TCGA_Tumor[i] <- as.character(s$Tumor[i])
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Condition[i])) {
s$Condition[i] <- paste("Not SCN-altered in more than", pat.percentage, "% of the samples", sep=" ")
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Pat.percentage[i])) {
s$Pat.percentage[i] <- 0
}
}
return(s)
}else if(is.null(dataDEGs) || nrow(dataDEGs[dataDEGs$Gene_Symbol %in% genes, ]) == 0) {
d <- as.data.frame(.setRowMatrix(nrow(SCNA.DEG.result), c("Gene_Symbol", "logFC", "logCPM", "PValue", "FDR", "Tumor")))
d$Gene_Symbol <- SCNA.DEG.result$Gene_Symbol
s <-  merge(d, SCNA.DEG.result, by = "Gene_Symbol", all = TRUE)
s$Condition <- as.character(s$Condition)
s$Pat.IDs <- as.character(s$Pat.IDs)
s$Tumor <- as.character(s$Tumor)
s$TCGA_Tumor <- as.character(s$TCGA_Tumor)
for(i in 1:nrow(s)) {
if(is.na(s$logFC[i])) {
s$logFC[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$logCPM[i])) {
s$logCPM[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$PValue[i])) {
s$PValue[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$FDR[i])) {
s$FDR[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Tumor[i])) {
s$Tumor[i] <- as.character(s$TCGA_Tumor[i])
}
}
for(i in 1:nrow(s)) {
if(is.na(s$log2FC.SCNAvsDip[i])) {
s$log2FC.SCNAvsDip[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$logCPM.SCNAvsDip[i])) {
s$logCPM.SCNAvsDip[i] <- 0
}
}
for(i in 1:nrow(s)) {
if(is.na(s$p.val.SCNAvsDip[i])) {
s$p.val.SCNAvsDip[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$FDR.SCNAvsDip[i])) {
s$FDR.SCNAvsDip[i] <- 1
}
}
for(i in 1:nrow(s)) {
if(is.na(s$TCGA_Tumor[i])) {
s$TCGA_Tumor[i] <- as.character(s$Tumor[i])
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Condition[i])) {
s$Condition[i] <- paste("Not SCN-altered in more than", pat.percentage, " ")
}
}
for(i in 1:nrow(s)) {
if(is.na(s$Pat.percentage[i])) {
s$Pat.percentage[i] <- 0
}
}
return(s)
}
}
# This function returns for each copy number altered gene all those cosmic ones highly correlating: 1) CN-altered samples overlap > 70% and 2) DE correlation
.getOverlapCOSMIC <- function(SCNA.DEG.result, genes, cosmic.genes) {
int.matrix <- .setRowMatrix(0, colnames(SCNA.DEG.result))
input <- SCNA.DEG.result[SCNA.DEG.result$Gene_Symbol %in% genes & SCNA.DEG.result$log2FC.SCNAvsDip != 0, ]
cosmic <- SCNA.DEG.result[SCNA.DEG.result$Gene_Symbol %in% cosmic.genes & SCNA.DEG.result$log2FC.SCNAvsDip != 0, ]
colnames(cosmic) <- paste(colnames(cosmic), "COSMIC", sep="_")
if(nrow(input) > 0 & nrow(cosmic) > 0) {
for(j in 1:nrow(input)) {
for(k in 1:nrow(cosmic)) {
if(input$TCGA_Tumor[j] == cosmic$TCGA_Tumor[k] & as.character(input$Condition[j]) == as.character(cosmic$Condition[k])) {
a <- unlist(strsplit(as.character(input$Pat.IDs[j]), ","))
b <- unlist(strsplit(as.character(cosmic$Pat.IDs[k]), ","))
int <- intersect(a, b)
a.l <- length(a)
b.l <- length(b)
int.l <- length(int)
prop.gene.cosmic <- (int.l/a.l) * 100
prop.cosmic.gene <- (int.l/b.l) * 100
if(prop.gene.cosmic >= 70) {
line <- cbind(as.vector(input[j,]), cosmic[k, ])
line$PROP_GENE_COSMIC <- prop.gene.cosmic
line$PROP_COSMIC_GENE <- prop.cosmic.gene
int.matrix <- rbind(int.matrix, line)
}
}
}
}
if(nrow(int.matrix) > 0) {
return(int.matrix)
}else{
int.matrix <- .setRowMatrix(nrow = 0, c("Gene_Symbol", "log2FC.SCNAvsDip", "logCPM.SCNAvsDip", "p.val.SCNAvsDip", "FDR.SCNAvsDip", "TCGA_Tumor", "Condition", "Pat.percentage", "Pat.IDs", "Gene_Symbol_COSMIC", "log2FC.SCNAvsDip_COSMIC", "logCPM.SCNAvsDip_COSMIC", "p.val.SCNAvsDip_COSMIC", "FDR.SCNAvsDip_COSMIC", "TCGA_Tumor_COSMIC", "Condition_COSMIC", "Pat.percentage_COSMIC", "Pat.IDs_COSMIC", "PROP_GENE_COSMIC", "PROP_COSMIC_GENE"))
return(int.matrix)
}
}
}
tumor.exp <- .downloadExpression(tumor, tumors, tumors.with.normal)
dataFilt <- .filterExpression(tumor, sign, tumor.exp, pp.cor.cut, norm.method,
filt.method, filt.qnt.cut, filt.var.func,
filt.var.cutoff, filt.eta, filt.FC)
samplesNT <- TCGAbiolinks::TCGAquery_SampleTypes(barcode = colnames(dataFilt),
typesample = c("NT"))
samplesNT
dataFilt[1:3,samplesNT]
samplesTP <- TCGAbiolinks::TCGAquery_SampleTypes(barcode = colnames(dataFilt),
typesample = c("TP"))
dataFilt[1:3,samplesTP]
dataFilt[,samplesTP]
dataDEGs <- TCGAbiolinks::TCGAanalyze_DEA(mat1 = dataFilt[,samplesNT],
mat2 = dataFilt[,samplesTP],
metadata = FALSE,
Cond1type = "Normal",
Cond2type = "Tumor",
fdr.cut = FDR.DEA,
logFC.cut = FC,
method = "exactTest")
.getDataDEGs <- function(tumor, dataFilt, filt.FDR.DEA, FC){
samplesNT <- TCGAbiolinks::TCGAquery_SampleTypes(barcode = colnames(dataFilt),
typesample = c("NT"))
samplesTP <- TCGAbiolinks::TCGAquery_SampleTypes(barcode = colnames(dataFilt),
typesample = c("TP"))
dataDEGs <- TCGAbiolinks::TCGAanalyze_DEA(mat1 = dataFilt[,samplesNT],
mat2 = dataFilt[,samplesTP],
metadata = FALSE,
Cond1type = "Normal",
Cond2type = "Tumor",
fdr.cut = filt.FDR.DEA,
logFC.cut = FC,
method = "exactTest")
dataDEGs$Tumor <- rep(tumor, times = nrow(dataDEGs))
dataDEGs$Gene_Symbol <- rownames(dataDEGs)
dataDEGs <- dataDEGs[,c("Gene_Symbol", "logFC", "logCPM", "PValue", "FDR", "Tumor")]
return(dataDEGs)
}
dataDEGs <- .getDataDEGs(tumor, dataFilt, filt.FDR.DEA, filt.FC)
if(is.null(cna.mat)) {
# If the user does not provide a SCNA matrix as indicated...
gistic <- .getSCNAmatrix(tumor)
}else if(!is.null(cna.mat)) {
# If the user provides a SCNA matrix as indicated...
gistic <- as.data.frame(cna.mat)
}
colnames(dataFilt) <- substr(colnames(dataFilt), 1, 12)
dataFilt <- dataFilt[intersect(rownames(dataFilt), rownames(gistic)), intersect(colnames(dataFilt), colnames(gistic))]
gistic <- gistic[intersect(rownames(dataFilt), rownames(gistic)), intersect(colnames(dataFilt), colnames(gistic))]
exp <- as.data.frame(t(dataFilt[order(rownames(dataFilt)), ]))
cna <- as.data.frame(t(gistic[order(rownames(gistic)), ]))
exp <- exp[order(rownames(exp)), ]
cna <- cna[order(rownames(cna)), ]
save(exp, file = paste(tumor, "_exp_matrix.rda", sep=""))
save(cna, file = paste(tumor, "_cna_matrix.rda", sep=""))
SCNA.DEG.result <- .setRowMatrix(nrow = 0, c("Gene_Symbol", "log2FC.SCNAvsDip", "logCPM.SCNAvsDip", "p.val.SCNAvsDip", "FDR.SCNAvsDip", "TCGA_Tumor", "Condition", "Pat.percentage", "Pat.IDs"))
for(j in 1:ncol(exp)) {
gene <- colnames(exp)[j]
new <- as.data.frame(.setRowMatrix(nrow(exp), c(paste(gene, "_exp", sep=""), paste(gene, "_cna", sep=""))))
rownames(new) <- rownames(exp)
new[,1] <- as.numeric(as.character(exp[,gene]))
new[,2] <- as.numeric(as.character(cna[,gene]))
group.del <- .selectDel(new, cna.thr)
group.amp <- .selectAmp(new, cna.thr)
group.neutro <- .selectDiploid(new, cna.thr)
print(gene)
print(paste("Deleted in ", nrow(group.del), " samples", sep=""))
print(paste("Amplified in ", nrow(group.amp), " samples", sep=""))
print(paste("Diploid in ", nrow(group.neutro), " samples", sep=""))
print("------------------------")
minimum.patients <- .setMinPat(new, pat.percentage)
del.patients <- (nrow(group.del)/nrow(new)) * 100
amp.patients <- (nrow(group.amp)/nrow(new)) * 100
neutro.patients <- (nrow(group.neutro)/nrow(new)) * 100
dataDEGs.SCNA <- NULL
if(isTRUE(nrow(group.del) < minimum.patients & nrow(group.amp) < minimum.patients)) {
next
}else if(isTRUE(nrow(group.del) >= minimum.patients) & isTRUE(nrow(group.neutro) >= minimum.patients)) {
group.x <- group.del
group.y <- group.neutro
cond <- c("Group DEL vs Group DIPLOID")
SCNA.prop.pat <- del.patients
pat.ids <- paste(rownames(group.del), collapse = ",")
dataDEGs.SCNA <- .getDataDEGs_SCNA(tumor, dataFilt, group.x, group.y, filt.FDR.DEA, filt.FC, gene)
}else if(isTRUE(nrow(group.amp) >= minimum.patients) & isTRUE(nrow(group.neutro) >= minimum.patients)) {
group.x <- group.amp
group.y <- group.neutro
cond <- c("Group AMP vs Group DIPLOID")
SCNA.prop.pat <- amp.patients
pat.ids <- paste(rownames(group.amp), collapse = ",")
dataDEGs.SCNA <- .getDataDEGs_SCNA(tumor, dataFilt, group.x, group.y, filt.FDR.DEA, filt.FC, gene)
}
if(!is.null(dataDEGs.SCNA)) {
line <- .newSCNAline(dataDEGs.SCNA, cond, SCNA.prop.pat, pat.ids)
SCNA.DEG.result <- rbind(SCNA.DEG.result, line)
}
}
SCNA.DEG.result <- .convertToDF(SCNA.DEG.result)
if(nrow(SCNA.DEG.result) > 0) {
merge.dataDEGs <- .mergeDEGs(dataDEGs, SCNA.DEG.result, pat.percentage, genes, cosmic.genes)
if(is.null(EXPintCNA.results)) {
EXPintCNA.results <- merge.dataDEGs
}else{
EXPintCNA.results <- rbind(EXPintCNA.results, merge.dataDEGs)
}
}else{
merge.dataDEGs <- .setRowMatrix(nrow = 0, c("Gene_Symbol", "logFC", "logCPM", "PValue", "FDR", "Tumor", "log2FC.SCNAvsDip", "logCPM.SCNAvsDip", "p.val.SCNAvsDip", "FDR.SCNAvsDip", "TCGA_Tumor", "Condition", "Pat.percentage", "Pat.IDs"))
if(is.null(EXPintCNA.results)) {
EXPintCNA.results <- merge.dataDEGs
}else{
EXPintCNA.results <- rbind(EXPintCNA.results, merge.dataDEGs)
}
}
COSMIC.overlap <- .getOverlapCOSMIC(SCNA.DEG.result, genes, cosmic.genes)
if(is.null(COSMIC.ov.result)) {
COSMIC.ov.result <- COSMIC.overlap
}else{
COSMIC.ov.result <- rbind(COSMIC.ov.result, COSMIC.overlap)
}
for(i in 1:length(cohorts)) {
tumor <- cohorts[i]
if(tumor %in% tumors) {
print(paste("Analyzing ", tumor, "...", sep=""))
}else{
print(paste("The introduced cohort: ", tumor, " was not found among the available TCGA cohorts. Bad-spelling is a common mistake, please check it or select any of the available ones.", sep=""))
next
}
dataDEGs <- NULL
if(is.null(exp.mat) && tumor %in% tumors.with.normal) {
# If the user does not provide an expression matrix as indicated...
tumor.exp <- .downloadExpression(tumor, tumors, tumors.with.normal)
dataFilt <- .filterExpression(tumor, sign, tumor.exp, pp.cor.cut, norm.method,
filt.method, filt.qnt.cut, filt.var.func,
filt.var.cutoff, filt.eta, filt.FC)
dataDEGs <- .getDataDEGs(tumor, dataFilt, filt.FDR.DEA, filt.FC)
write.table(dataDEGs, file = paste("dataDEGs_", tumor, ".txt", sep=""), sep="\t", quote=FALSE)
}else if(is.null(exp.mat) && tumor != tumors.with.normal){
tumor.exp <- .downloadExpression(tumor, tumors, tumors.with.normal)
dataFilt <- .filterExpression(tumor, sign, tumor.exp, pp.cor.cut, norm.method,
filt.method, filt.qnt.cut, filt.var.func,
filt.var.cutoff, filt.eta, filt.FC)
}else{
# If the user provides an expression matrix as indicated...
dataFilt <- exp.mat
}
if(is.null(cna.mat)) {
# If the user does not provide a SCNA matrix as indicated...
gistic <- .getSCNAmatrix(tumor)
}else if(!is.null(cna.mat)) {
# If the user provides a SCNA matrix as indicated...
gistic <- as.data.frame(cna.mat)
}
colnames(dataFilt) <- substr(colnames(dataFilt), 1, 12)
dataFilt <- dataFilt[intersect(rownames(dataFilt), rownames(gistic)), intersect(colnames(dataFilt), colnames(gistic))]
gistic <- gistic[intersect(rownames(dataFilt), rownames(gistic)), intersect(colnames(dataFilt), colnames(gistic))]
exp <- as.data.frame(t(dataFilt[order(rownames(dataFilt)), ]))
cna <- as.data.frame(t(gistic[order(rownames(gistic)), ]))
exp <- exp[order(rownames(exp)), ]
cna <- cna[order(rownames(cna)), ]
save(exp, file = paste(tumor, "_exp_matrix.rda", sep=""))
save(cna, file = paste(tumor, "_cna_matrix.rda", sep=""))
SCNA.DEG.result <- .setRowMatrix(nrow = 0, c("Gene_Symbol", "log2FC.SCNAvsDip", "logCPM.SCNAvsDip", "p.val.SCNAvsDip", "FDR.SCNAvsDip", "TCGA_Tumor", "Condition", "Pat.percentage", "Pat.IDs"))
for(j in 1:ncol(exp)) {
gene <- colnames(exp)[j]
new <- as.data.frame(.setRowMatrix(nrow(exp), c(paste(gene, "_exp", sep=""), paste(gene, "_cna", sep=""))))
rownames(new) <- rownames(exp)
new[,1] <- as.numeric(as.character(exp[,gene]))
new[,2] <- as.numeric(as.character(cna[,gene]))
group.del <- .selectDel(new, cna.thr)
group.amp <- .selectAmp(new, cna.thr)
group.neutro <- .selectDiploid(new, cna.thr)
print(gene)
print(paste("Deleted in ", nrow(group.del), " samples", sep=""))
print(paste("Amplified in ", nrow(group.amp), " samples", sep=""))
print(paste("Diploid in ", nrow(group.neutro), " samples", sep=""))
print("------------------------")
minimum.patients <- .setMinPat(new, pat.percentage)
del.patients <- (nrow(group.del)/nrow(new)) * 100
amp.patients <- (nrow(group.amp)/nrow(new)) * 100
neutro.patients <- (nrow(group.neutro)/nrow(new)) * 100
dataDEGs.SCNA <- NULL
if(isTRUE(nrow(group.del) < minimum.patients & nrow(group.amp) < minimum.patients)) {
next
}else if(isTRUE(nrow(group.del) >= minimum.patients) & isTRUE(nrow(group.neutro) >= minimum.patients)) {
group.x <- group.del
group.y <- group.neutro
cond <- c("Group DEL vs Group DIPLOID")
SCNA.prop.pat <- del.patients
pat.ids <- paste(rownames(group.del), collapse = ",")
dataDEGs.SCNA <- .getDataDEGs_SCNA(tumor, dataFilt, group.x, group.y, filt.FDR.DEA, filt.FC, gene)
}else if(isTRUE(nrow(group.amp) >= minimum.patients) & isTRUE(nrow(group.neutro) >= minimum.patients)) {
group.x <- group.amp
group.y <- group.neutro
cond <- c("Group AMP vs Group DIPLOID")
SCNA.prop.pat <- amp.patients
pat.ids <- paste(rownames(group.amp), collapse = ",")
dataDEGs.SCNA <- .getDataDEGs_SCNA(tumor, dataFilt, group.x, group.y, filt.FDR.DEA, filt.FC, gene)
}
if(!is.null(dataDEGs.SCNA)) {
line <- .newSCNAline(dataDEGs.SCNA, cond, SCNA.prop.pat, pat.ids)
SCNA.DEG.result <- rbind(SCNA.DEG.result, line)
}
}
SCNA.DEG.result <- .convertToDF(SCNA.DEG.result)
if(nrow(SCNA.DEG.result) > 0) {
merge.dataDEGs <- .mergeDEGs(dataDEGs, SCNA.DEG.result, pat.percentage, genes, cosmic.genes)
if(is.null(EXPintCNA.results)) {
EXPintCNA.results <- merge.dataDEGs
}else{
EXPintCNA.results <- rbind(EXPintCNA.results, merge.dataDEGs)
}
}else{
merge.dataDEGs <- .setRowMatrix(nrow = 0, c("Gene_Symbol", "logFC", "logCPM", "PValue", "FDR", "Tumor", "log2FC.SCNAvsDip", "logCPM.SCNAvsDip", "p.val.SCNAvsDip", "FDR.SCNAvsDip", "TCGA_Tumor", "Condition", "Pat.percentage", "Pat.IDs"))
if(is.null(EXPintCNA.results)) {
EXPintCNA.results <- merge.dataDEGs
}else{
EXPintCNA.results <- rbind(EXPintCNA.results, merge.dataDEGs)
}
}
COSMIC.overlap <- .getOverlapCOSMIC(SCNA.DEG.result, genes, cosmic.genes)
if(is.null(COSMIC.ov.result)) {
COSMIC.ov.result <- COSMIC.overlap
}else{
COSMIC.ov.result <- rbind(COSMIC.ov.result, COSMIC.overlap)
}
}
remove.packages("ciberAMP")
devtools::install_github("vqf/ciberAMP", dependencies = TRUE)
library(ciberAMP)
x <- ciberAMP(genes = c("CDKN2A"), cohorts = c("HNSC"))
cna
head(cna)
dataFilt[1:4,1:4]
for(j in 1:ncol(exp)) {
gene <- colnames(exp)[j]
new <- as.data.frame(.setRowMatrix(nrow(exp), c(paste(gene, "_exp", sep=""), paste(gene, "_cna", sep=""))))
rownames(new) <- rownames(exp)
new[,1] <- as.numeric(as.character(exp[,gene]))
new[,2] <- as.numeric(as.character(cna[,gene]))
group.del <- .selectDel(new, cna.thr)
group.amp <- .selectAmp(new, cna.thr)
group.neutro <- .selectDiploid(new, cna.thr)
print(gene)
print(paste("Deleted in ", nrow(group.del), " samples", sep=""))
print(paste("Amplified in ", nrow(group.amp), " samples", sep=""))
print(paste("Diploid in ", nrow(group.neutro), " samples", sep=""))
print("------------------------")
minimum.patients <- .setMinPat(new, pat.percentage)
del.patients <- (nrow(group.del)/nrow(new)) * 100
amp.patients <- (nrow(group.amp)/nrow(new)) * 100
neutro.patients <- (nrow(group.neutro)/nrow(new)) * 100
dataDEGs.SCNA <- NULL
if(isTRUE(nrow(group.del) < minimum.patients & nrow(group.amp) < minimum.patients)) {
next
}else if(isTRUE(nrow(group.del) >= minimum.patients) & isTRUE(nrow(group.neutro) >= minimum.patients)) {
group.x <- group.del
group.y <- group.neutro
cond <- c("Group DEL vs Group DIPLOID")
SCNA.prop.pat <- del.patients
pat.ids <- paste(rownames(group.del), collapse = ",")
dataDEGs.SCNA <- .getDataDEGs_SCNA(tumor, dataFilt, group.x, group.y, filt.FDR.DEA, filt.FC, gene)
}else if(isTRUE(nrow(group.amp) >= minimum.patients) & isTRUE(nrow(group.neutro) >= minimum.patients)) {
group.x <- group.amp
group.y <- group.neutro
cond <- c("Group AMP vs Group DIPLOID")
SCNA.prop.pat <- amp.patients
pat.ids <- paste(rownames(group.amp), collapse = ",")
dataDEGs.SCNA <- .getDataDEGs_SCNA(tumor, dataFilt, group.x, group.y, filt.FDR.DEA, filt.FC, gene)
}
if(!is.null(dataDEGs.SCNA)) {
line <- .newSCNAline(dataDEGs.SCNA, cond, SCNA.prop.pat, pat.ids)
SCNA.DEG.result <- rbind(SCNA.DEG.result, line)
}
}
